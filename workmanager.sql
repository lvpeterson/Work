-- phpMyAdmin SQL Dump
-- version 4.0.10deb1
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Sep 20, 2016 at 04:31 PM
-- Server version: 5.5.52-0ubuntu0.14.04.1
-- PHP Version: 5.5.9-1ubuntu4.19

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `workmanager`
--

-- --------------------------------------------------------

--
-- Table structure for table `help_info`
--

CREATE TABLE IF NOT EXISTS `help_info` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `stepnum` varchar(10) NOT NULL,
  `category` varchar(250) NOT NULL,
  `data` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=407 ;

--
-- Dumping data for table `help_info`
--

INSERT INTO `help_info` (`id`, `stepnum`, `category`, `data`) VALUES
(27, '1.1.1', 'Explore Visible Content', 'Configure your browser to use your favorite integrated proxy/spidering tool. Both Burp and WebScarab can be used to passively spider the site by monitoring and parsing web content processed by the proxy.'),
(28, '1.1.2', 'Explore Visible Content', 'If you find it useful configure your browser to use an extension such as IEWatch to monitor and analyze the HTTP and HTML content being processed by the browser.'),
(29, '1.1.3', 'Explore Visible Content', 'Browse the entire application in the normal way visiting every link and URL submitting every form and proceeding through all multistep functions to completion. Try browsing with JavaScript enabled and disabled and with cookies enabled and disabled. Many applications can handle various browser configurations and you may reach different content and code paths within the application.'),
(30, '1.1.4', 'Explore Visible Content', 'If the application uses authentication and you have or can create a login account use this to access the protected functionality.'),
(31, '1.1.5', 'Explore Visible Content', 'As you browse monitor the requests and responses passing through your intercepting proxy to gain an understanding of the kinds of data being submitted and the ways in which the client is used to control the behavior of the server-side application.'),
(32, '1.1.6', 'Explore Visible Content', 'Review the site map generated by the passive spidering and identify any content or functionality that you have not walked through using your browser. From the spider results establish where each item was discovered(for example in Burp Spider check the Linked From details). Access each item using your browser so that the spider parses the response from the server to identify any further content. Continue this step recursively until no further content or functionality is identified.'),
(33, '1.1.7', 'Explore Visible Content', 'When you have finished manually browsing and passively spidering you can use your spider to actively crawl the application using the set of discovered URLs as seeds. This may sometimes uncover additional content that you overlooked when working manually. Before doing an automated crawl first identify any URLs that are dangerous or likely to break the application session and then configure the spider to exclude these from its scope.'),
(34, '1.2.1', 'Consult Public Resources', 'Use Internet search engines and archives (such as the Wayback Machine) to identify what content they have indexed and stored for your target application.'),
(35, '1.2.2', 'Consult Public Resources', 'Use advanced search options to improve the effectiveness of your research.For example on Google you can use <i>site:</i> to retrieve all the content for your target site and <i>link:</i> to retrieve other sites that link to it. If your search identifies content that is no longer present in the live application you may still be able to view this from the search engines cache. This old content may contain links to additional resources that have not yet been removed.'),
(36, '1.2.3', 'Consult Public Resources', 'Perform searches on any names and e-mail addresses you have discovered in the applications content such as contact information. Include items not rendered on-screen such as HTML comments. In addition to web searches perform news and group searches. Look for any technical details posted to Internet forums regarding the target application and its supporting infrastructure.'),
(37, '1.2.4', 'Consult Public Resources', 'Review any published WSDL files to generate a list of function names and parameter values potentially employed by the application.'),
(38, '1.3.1', 'Discover Hidden Content', 'Confirm how the application handles requests for nonexistent items.Make some manual requests for known valid and invalid resources and compare the servers responses to establish an easy way to identify when an item does not exist.'),
(39, '1.3.2', 'Discover Hidden Content', 'Obtain listings of common file and directory names and common file extensions. Add to these lists all the items actually observed within the applications and also items inferred from these. Try to understand the naming conventions used by application developers. For example if there are pages called <i>AddDocument.jsp</i> and <i>ViewDocument.jsp</i> there may also be pages called <i>EditDocument.jsp</i> and <i>RemoveDocument.jsp</i>'),
(40, '1.3.3', 'Discover Hidden Content', 'Review all client-side code to identify any clues about hidden server-side content including HTML comments and disabled form elements.'),
(41, '1.3.4', 'Discover Hidden Content', 'Use automation techniques to make large numbers of requests based on your directory filename and file extension lists. Monitor the servers responses to confirm which items are present and accessible.'),
(42, '1.3.5', 'Discover Hidden Content', 'Perform these content-discovery exercises recursively using new enumerated content and patterns as the basis for further user-directed spidering and further automated discovery.'),
(43, '1.4.1', 'Discover Default Content', 'Run Nikto against the web server to detect any default or well-known content that is present. Use Niktos options to maximize its effectiveness.For example you can use the root option to specify a directory to check for default content or 404 to specify a string that identifies a custom File Not Found page.'),
(44, '1.4.2', 'Discover Default Content', 'Verify any potentially interesting findings manually to eliminate any false positives within the results.'),
(45, '1.4.3', 'Discover Default Content', 'Request the servers root directory specifying the IP address in the Host header and determine if the application responds with any different content. If so run a Nikto scan against the IP address as well as the server name.'),
(46, '1.4.4', 'Discover Default Content', 'Make a request to the servers root directory specifying a range of <i>User-Agent</i> headers as shown at <i><a target="_blank" href="http://www.useragentstring.com/pages/useragentstring.php">www.useragentstring.com/pages/useragentstring.php</a></i>.'),
(47, '1.5.1', 'Enumerate Identifier-Specified Functions', 'Identify any instances where specific application functions are accessed bypassing an identifier of the function in a request parameter (for example /admin.jsp?action=editUser or /main.php?func=A21).'),
(48, '1.5.2', 'Enumerate Identifier-Specified Functions', 'Apply the content discovery techniques used in ''Discover Hidden Content'' to the mechanism being used to access individual functions. For example if the application uses a parameter containing a function name first determine its behavior when an invalid function is specified and try to establish an easy way to identify when a valid function has been requested. Compile a list of common function names or cycle through the syntactic range of identifiers observed to be in use. Automate the exercise to enumerate valid functionality as quickly and easily as possible.'),
(49, '1.5.3', 'Enumerate Identifier-Specified Functions', 'If applicable compile a map of application content based on functional paths rather than URLs showing all the enumerated functions and the logical paths and dependencies between them.'),
(50, '1.6.1', 'Test for Debug Parameters', 'Choose one or more application pages or functions where hidden debugparameters (such as debug=true) may be implemented. These are mostlikely to appear in key functionality such as login search and fi le uploador download.'),
(51, '1.6.2', 'Test for Debug Parameters', 'Use listings of common debug parameter names (such as debug testhide and source) and common values (such as true yes on and 1).Iterate through all permutations of these submitting each name/valuepair to each targeted function. For POST requests supply the parameterin both the URL query string and the request body. Use the techniquesdescribed in Chapter 14 to automate this exercise. For example youcan use the cluster bomb attack type in Burp Intruder to combine allpermutations of two payload lists.'),
(52, '1.6.3', 'Test for Debug Parameters', 'Review the application’s responses for any anomalies that may indicatethat the added parameter has had an effect on the application’s processing.'),
(53, '2.1.1', 'Identify Functionality', 'Identify the core functionality that the application was created for andthe actions that each function is designed to perform when used asintended.'),
(54, '2.1.2', 'Identify Functionality', 'Identify the core security mechanisms employed by the application andhow they work. In particular understand the key mechanisms that handleChapter 21 n A Web Application Hacker’s Methodology 799authentication session management and access control and the functionsthat support them such as user registration and account recovery.'),
(55, '2.1.3', 'Identify Functionality', 'Identify all the more peripheral functions and behavior such as the useof redirects off-site links error messages and administrative and loggingfunctions.'),
(56, '2.1.4', 'Identify Functionality', 'Identify any functionality that diverges from the standard GUI appearanceparameter naming or navigation mechanism used elsewhere inthe application and single it out for in-depth testing.'),
(57, '2.2.1', 'Identify Data Entry Points', 'Identify all the different entry points that exist for introducing userinput into the application’s processing including URLs query stringparameters POST data cookies and other HTTP headers processed bythe application.'),
(58, '2.2.2', 'Identify Data Entry Points', 'Examine any customized data transmission or encoding mechanismsused by the application such as a nonstandard query string format.Understand whether the data being submitted encapsulates parameternames and values or whether an alternative means of representationis being used.'),
(59, '2.2.3', 'Identify Data Entry Points', 'Identify any out-of-band channels via which user-controllable or otherthird-party data is being introduced into the application’s processing.An example is a web mail application that processes and renders messagesreceived via SMTP.'),
(60, '2.3.1', 'Identify the Technologies Used', 'Identify each of the different technologies used on the client side such asforms scripts cookies Java applets ActiveX controls and Flash objects.'),
(61, '2.3.2', 'Identify the Technologies Used', 'As far as possible establish which technologies are being used on theserver side including scripting languages application platforms andinteraction with back-end components such as databases and e-mailsystems.'),
(62, '2.3.3', 'Identify the Technologies Used', 'Check the HTTP Server header returned in application responses andalso check for any other software identifi ers contained within customHTTP headers or HTML source code comments. Note that in some casesdifferent areas of the application are handled by different back-endcomponents so different banners may be received.'),
(63, '2.3.4', 'Identify the Technologies Used', 'Run the Httprint tool to fi ngerprint the web server.'),
(64, '2.3.5', 'Identify the Technologies Used', 'Review the results of your content-mapping exercises to identify anyinteresting-looking fi le extensions directories or other URL subsequences'),
(65, '2.3.6', 'Identify the Technologies Used', 'Identify any interesting-looking script names and query string parametersthat may belong to third-party code components. Search for these onGoogle using the inurl: qualifi er to fi nd any other applications usingthe same scripts and parameters and that therefore may be using thesame third-party components. Perform a noninvasive review of thesesites because this may uncover additional content and functionality thatis not explicitly linked on the application you are attacking.'),
(66, '2.4.1', 'Map the Attack Surface', 'Try to ascertain the likely internal structure and functionality of theserver-side application and the mechanisms it uses behind the scenesto deliver the behavior that is visible from the client perspective. Forexample a function to retrieve customer orders is likely to be interactingwith a database.'),
(67, '2.4.2', 'Map the Attack Surface', 'For each item of functionality identify the kinds of common vulnerabilitiesthat are often associated with it. For example fi le upload functions maybe vulnerable to path traversal inter-user messaging may be vulnerableto XSS and Contact Us functions may be vulnerable to SMTP injection.See Chapter 4 for examples of vulnerabilities commonly associated withparticular functions and technologies.'),
(68, '2.4.3', 'Map the Attack Surface', 'Formulate a plan of attack prioritizing the most interesting-lookingfunctionality and the most serious of the potential vulnerabilities associatedwith it. Use your plan to guide the amount of time and effort youdevote to each of the remaining areas of this methodology.'),
(69, '3.1.1', 'Test Transmission of Data Via the Client', 'Locate all instances within the application where hidden form fi eldscookies and URL parameters are apparently being used to transmitdata via the client.'),
(70, '3.1.2', 'Test Transmission of Data Via the Client', 'Attempt to determine the purpose that the item plays in the application’slogic based on the context in which it appears and on its nameand value.'),
(71, '3.1.3', 'Test Transmission of Data Via the Client', 'Modify the item’s value in ways that are relevant to its role in theapplication’s functionality. Determine whether the application processesarbitrary values submitted in the fi eld and whether this factcan be exploited to interfere with the application’s logic or subvertany security controls.'),
(72, '3.1.4', 'Test Transmission of Data Via the Client', 'If the application transmits opaque data via the client you can attack thisin various ways. If the item is obfuscated you may be able to decipherthe obfuscation algorithm and therefore submit arbitrary data within theopaque item. Even if it is securely encrypted you may be able to replaythe item in other contexts to interfere with the application’s logic. SeeChapter 5 for more details on these and other attacks.'),
(73, '3.1.5', 'Test Transmission of Data Via the Client', 'If the application uses the ASP.NET ViewState test to confi rm whetherthis can be tampered with or whether it contains any sensitive information.Note that the ViewState may be used differently on differentapplication pages.'),
(74, '3.1.5.1', 'Test Transmission of Data Via the Client', 'Use the ViewState analyzer in Burp Suite to confi rm whetherthe EnableViewStateMac option has been enabled meaningthat the ViewState’s contents cannot be modifi ed.'),
(75, '3.1.5.2', 'Test Transmission of Data Via the Client', 'Review the decoded ViewState to identify any sensitive data itcontains.'),
(76, '3.1.5.3', 'Test Transmission of Data Via the Client', 'Modify one of the decoded parameter values and reencode andsubmit the ViewState. If the application accepts the modifi edvalue you should treat the ViewState as an input channel forintroducing arbitrary data into the application’s processing.Perform the same testing on the data it contains as you wouldfor any other request parameters.'),
(77, '3.2.1', 'Test Client-Side Controls Over User Input', 'Identify any cases where client-side controls such as length limits andJavaScript checks are used to validate user input before it is submitted'),
(78, '3.2.2', 'Test Client-Side Controls Over User Input', 'Test each affected input fi eld in turn by submitting input that wouldordinarily be blocked by the client-side controls to verify whether theseare replicated on the server.'),
(79, '3.2.3', 'Test Client-Side Controls Over User Input', 'The ability to bypass client-side validation does not necessarily representany vulnerability. Nevertheless you should review closely what validationis being performed. Confi rm whether the application is relyingon the client-side controls to protect itself from malformed input. Alsoconfi rm whether any exploitable conditions exist that can be triggeredby such input.'),
(80, '3.2.4', 'Test Client-Side Controls Over User Input', 'Review each HTML form to identify any disabled elements such asgrayed-out submit buttons. For example:<input disabled=”true” name=”product”>If you fi nd any submit these to the server along with the form’s otherparameters. See whether the parameter has any effect on the server’sprocessing that you can leverage in an attack. Alternatively use anautomated proxy rule to automatically enable disabled fi elds such asBurp Proxy’s “HTML Modifi cation” rules.'),
(81, '3.3.1', 'Test Browser Extension Components', 'Understand the Client Application’s Operation'),
(82, '3.3.1.1', 'Test Browser Extension Components', 'Set up a local intercepting proxy for the client technology under reviewand monitor all traffi c passing between the client and server. If data isserialized use a deserialization tool such as Burp’s built-in AMF supportor the DSer Burp plug-in for Java.'),
(83, '3.3.1.2', 'Test Browser Extension Components', 'Step through the functionality presented in the client. Determine anypotentially sensitive or powerful functions using standard tools withinthe intercepting proxy to replay key requests or modify server responses.'),
(84, '3.3.2', 'Test Browser Extension Components', 'Decompile the Client'),
(85, '3.3.2.1', 'Test Browser Extension Components', 'Identify any applets employed by the application. Look for any of thefollowing fi le types being requested via your intercepting proxy:n .class .jar : Javan .swf : Flashn .xap : SilverlightChapter 21 n A Web Application Hacker’s Methodology 803You can also look for applet tags within the HTML source code ofapplication pages. For example:<applet code=”input.class” id=”TheApplet” codebase=”/scripts/”></applet>'),
(86, '3.3.2.2', 'Test Browser Extension Components', 'Review all calls made to the applet’s methods from within the invokingHTML and determine whether data returned from the applet is beingsubmitted to the server. If this data is opaque (that is obfuscated orencrypted) to modify it you will probably need to decompile the appletto obtain its source code.'),
(87, '3.3.2.3', 'Test Browser Extension Components', 'Download the applet bytecode by entering the URL into your browserand save the fi le locally. The name of the bytecode fi le is specifi ed inthe code attribute of the applet tag. The fi le will be located in the directoryspecifi ed in the codebase attribute if this is present. Otherwise itwill be located in the same directory as the page in which the applet tagappears.'),
(88, '3.3.2.4', 'Test Browser Extension Components', 'Use a suitable tool to decompile the bytecode into source code. Forexample:C:\\>jad.exe input.classParsing input.class... Generating input.jadHere are some suitable tools for decompiling different browser extensioncomponents:n Java — Jadn Flash — SWFScan Flasm/Flaren Silverlight — .NET ReflectorIf the applet is packaged into a JAR XAP or SWF fi le you can unpackit using a standard archive reader such as WinRar or WinZip.'),
(89, '3.3.2.5', 'Test Browser Extension Components', 'Review the relevant source code (starting with the implementation ofthe method that returns the opaque data) to understand what processingis being performed.'),
(90, '3.3.2.6', 'Test Browser Extension Components', 'Determine whether the applet contains any public methods that can beused to perform the relevant obfuscation on arbitrary input.'),
(91, '3.3.2.7', 'Test Browser Extension Components', 'If it doesn’t modify the applet’s source to neutralize any validation itperforms or to allow you to obfuscate arbitrary input. You can thenrecompile the source into its original fi le format using the compilationtools provided by the vendor.'),
(92, '3.3.3', 'Test Browser Extension Components', 'Attach a Debugger'),
(93, '3.3.3.1', 'Test Browser Extension Components', 'For large client-side applications it is often prohibitively diffi cult todecompile the whole application modify it and repackage it without'),
(94, '3.3.3.2', 'Test Browser Extension Components', 'Locate the key functions and values the application employs to drivesecurity-related business logic and place breakpoints when the targetedfunction is called. Modify the arguments or return value as needed toaffect the security bypass.'),
(95, '3.3.4', 'Test Browser Extension Components', 'Test ActiveX controls'),
(96, '3.3.4.1', 'Test Browser Extension Components', 'Identify any ActiveX controls employed by the application. Look forany .cab fi le types being requested via your intercepting proxy or lookfor object tags within the HTML source code of application pages. Forexample:<OBJECTclassid=”CLSID:4F878398-E58A-11D3-BEE9-00C04FA0D6BA”codebase=”https://wahh app.com/scripts/input.cab”id=”TheAxControl”></OBJECT>'),
(97, '3.3.4.2', 'Test Browser Extension Components', 'It is usually possible to subvert any input validation performed withinan ActiveX control by attaching a debugger to the process and directlymodifying data being processed or altering the program’s executionpath. See Chapter 5 for more details about this kind of attack.'),
(98, '3.3.4.3', 'Test Browser Extension Components', 'It is often possible to guess the purpose of different methods that anActiveX control exports based on their names and the parameterspassed to them. Use the COMRaider tool to enumerate the methodsexported by the control. Test whether any of these can be manipulatedto affect the control’s behavior and defeat any validation testsit implements.'),
(99, '3.3.4.4', 'Test Browser Extension Components', 'If the control’s purpose is to gather or verify certain information aboutthe client computer use the Filemon and Regmon tools to monitor theinformation the control gathers. It is often possible to create suitableitems within the system registry and fi lesystem to fi x the inputs usedby the control and therefore affect its behavior.'),
(100, '3.3.4.5', 'Test Browser Extension Components', 'Test any ActiveX controls for vulnerabilities that could be exploited toattack other users of the application. You can modify the HTML usedto invoke a control to pass arbitrary data to its methods and monitorthe results. Look for methods with dangerous-sounding names suchas LaunchExe. You can also use COMRaider to perform some basic fuzztesting of ActiveX controls to identify fl aws such as buffer overfl ows.'),
(101, '4.1.1', 'Understand the Mechanism', 'Establish the authentication technologies in use (for example formscertifi cates or multifactor).'),
(102, '4.1.2', 'Understand the Mechanism', 'Locate all the authentication-related functionality (including loginregistration account recovery and so on).'),
(103, '4.1.3', 'Understand the Mechanism', 'If the application does not implement an automated self-registrationmechanism determine whether any other means exists of obtainingseveral user accounts.'),
(104, '4.2.1', 'Test Password Quality', 'Review the application for any description of the minimum quality rulesenforced on user passwords.'),
(105, '4.2.2', 'Test Password Quality', 'Attempt to set various kinds of weak passwords using any self-registrationor password change functions to establish the rules actually enforced.Try short passwords alphabetic characters only single-case charactersonly dictionary words and the current username.'),
(106, '4.2.3', 'Test Password Quality', 'Test for incomplete validation of credentials. Set a strong and complexpassword (for example 12 characters with mixed-case letters numeralsand typographic characters). Attempt to log in using different variationson this password by removing the last character by changing acharacter’s case and by removing any special characters. If any of theselogin attempts is successful continue experimenting systematically toidentify what validation is actually being performed.'),
(107, '4.2.4', 'Test Password Quality', 'Having established the minimum password quality rules and the extentof password validation identify the range of values that a passwordguessingattack would need to employ to have a good probability ofsuccess. Attempt to locate any built-in accounts that may not have beensubject to the standard password complexity requirements.'),
(108, '4.3.1', 'Test for Username Enumeration', 'Identify every location within the various authentication functionswhere a username is submitted including via an on-screen input fi elda hidden form fi eld or a cookie. Common locations include the primarylogin self-registration password change logout and account recovery.'),
(109, '4.3.2', 'Test for Username Enumeration', 'For each location submit two requests containing a valid and an invalidusername. Review every detail of the server’s responses to each pair ofrequests including the HTTP status code any redirects informationdisplayed on-screen any differences hidden in the HTML page sourceand the time taken for the server to respond. Note that some differencesmay be subtle (for example the same error message may contain minortypographical differences). You can use the history function of yourintercepting proxy to review all traffi c to and from the server. WebScarabhas a function to compare two responses to quickly highlight any differencesbetween them.'),
(110, '4.3.3', 'Test for Username Enumeration', 'If you observe any differences between the responses where a valid andinvalid username is submitted repeat the test with a different pair ofvalues and confi rm that a systematic difference exists that can providea basis for automated username enumeration.Chapter 21 n A Web Application Hacker’s Methodology 807'),
(111, '4.3.4', 'Test for Username Enumeration', 'Check for any other sources of information leakage within the applicationthat may enable you to compile a list of valid usernames. Examplesare logging functionality actual listings of registered users and directmention of names or e-mail addresses in source code comments.'),
(112, '4.3.5', 'Test for Username Enumeration', 'Locate any subsidiary authentication that accepts a username anddetermine whether it can be used for username enumeration. Payspecifi c attention to a registration page that allows specifi cation of ausername.'),
(113, '4.4.1', 'Test Resilience to Password Guessing', 'Identify every location within the application where user credentialsare submitted. The two main instances typically are the main loginfunction and the password change function. The latter normally is avalid target for password-guessing attacks only if an arbitrary usernamecan be supplied.'),
(114, '4.4.2', 'Test Resilience to Password Guessing', 'At each location using an account that you control manually sendseveral requests containing the valid username but other invalidcredentials. Monitor the application’s responses to identify any differences.After about 10 failed logins if the application has not returneda message about account lockout submit a request containing validcredentials. If this request succeeds an account lockout policy probablyis not in force.'),
(115, '4.4.3', 'Test Resilience to Password Guessing', 'If you do not control any accounts attempt to enumerate or guess avalid username and make several invalid requests using this guessmonitoring for any error messages about account lockout. Of courseyou should be aware that this test may have the effect of suspending ordisabling an account belonging to another user.'),
(116, '4.5.1', 'Test Any Account Recovery Function', 'Identify whether the application contains any facility for users to regaincontrol of their account if they have forgotten their credentials. Thisis often indicated by a Forgot Your Password link near the main loginfunction.'),
(117, '4.5.2', 'Test Any Account Recovery Function', 'Establish how the account recovery function works by doing a completewalk-through of the recovery process using an account you control.'),
(118, '4.5.3', 'Test Any Account Recovery Function', 'If the function uses a challenge such as a secret question determinewhether users can set or select their own challenge during registration.If so use a list of enumerated or common usernames to harvest a list ofchallenges and review this for any that appear to be easily guessable.'),
(119, '4.5.4', 'Test Any Account Recovery Function', 'If the function uses a password hint perform the same exercise to harvesta list of password hints and identify any that appear to be easilyguessable.'),
(120, '4.5.5', 'Test Any Account Recovery Function', 'Perform the same tests on any account-recovery challenges that you performedat the main login function to assess vulnerability to automatedguessing attacks.'),
(121, '4.5.6', 'Test Any Account Recovery Function', 'If the function involves sending an e-mail to the user to complete therecovery process look for any weaknesses that may enable you to takecontrol of other users’ accounts. Determine whether it is possible tocontrol the address to which the e-mail is sent. If the message containsa unique recovery URL obtain a number of messages using an e-mailaddress you control and attempt to identify any patterns that may enableyou to predict the URLs issued to other users. Apply the methodologydescribed in step 5.3 to identify any predictable sequences.'),
(122, '4.6.1', 'Test Any Remember Me Function', 'If the main login function or its supporting logic contains a RememberMe function activate this and review its effects. If this function allows theuser to log in on subsequent occasions without entering any credentialsyou should review it closely for any vulnerabilities.'),
(123, '4.6.2', 'Test Any Remember Me Function', 'Closely inspect all persistent cookies that are set when the Remember Mefunction is activated. Look for any data that identifi es the user explicitlyor appears to contain some predictable identifi er of the user.'),
(124, '4.6.3', 'Test Any Remember Me Function', 'Even where the data stored appears to be heavily encoded or obfuscatedreview this closely and compare the results of remembering several verysimilar usernames and/or passwords to identify any opportunities toreverse-engineer the original data. Apply the methodology describedin step 5.2 to identify any meaningful data.'),
(125, '4.6.4', 'Test Any Remember Me Function', 'Depending on your results modify the contents of your cookie in suitableways in an attempt to masquerade as other users of the application.'),
(126, '4.7.1', 'Test Any Impersonation Function', 'If the application contains any explicit functionality that allows oneuser to impersonate another review this closely for any vulnerabilitiesthat may enable you to impersonate arbitrary users without properauthorization.'),
(127, '4.7.2', 'Test Any Impersonation Function', 'Look for any user-supplied data that is used to determine the targetof the impersonation. Attempt to manipulate this to impersonateChapter 21 n A Web Application Hacker’s Methodology 809other users particularly administrative users which may enable youescalate privileges.'),
(128, '4.7.3', 'Test Any Impersonation Function', 'If you perform any automated password-guessing attacks against otheruser accounts look for any accounts that appear to have more than onevalid password or multiple accounts that appear to have the same password.This may indicate the presence of a backdoor password whichadministrators can use to access the application as any user.'),
(129, '4.8.1', 'Test Username Uniqueness', 'If the application has a self-registration function that lets you specifya desired username attempt to register the same username twice withdifferent passwords.'),
(130, '4.8.2', 'Test Username Uniqueness', 'If the application blocks the second registration attempt you can exploitthis behavior to enumerate registered usernames.'),
(131, '4.8.3', 'Test Username Uniqueness', 'If the application registers both accounts probe further to determine itsbehavior when a collision of username and password occurs. Attemptto change the password of one of the accounts to match that of theother. Also attempt to register two accounts with identical usernamesand passwords.'),
(132, '4.8.4', 'Test Username Uniqueness', 'If the application alerts you or generates an error when a collision ofusername and password occurs you can probably exploit this to performan automated guessing attack to discover another user’s password. Targetan enumerated or guessed username and attempt to create accountsthat have this username and different passwords. When the applicationrejects a specifi c password you have probably found the existingpassword for the targeted account.'),
(133, '4.8.5', 'Test Username Uniqueness', 'If the application appears to tolerate a collision of username and passwordwithout an error log in using the colliding credentials. Determinewhat happens and whether the application’s behavior can be leveragedto gain unauthorized access to other users’ accounts.'),
(134, '4.9.1', 'Test Predictability of Autogenerated Credentials', 'If the application automatically generates usernames or passwords tryto obtain several values in quick succession and identify any detectablesequences or patterns.'),
(135, '4.9.2', 'Test Predictability of Autogenerated Credentials', 'If usernames are generated in a predictable way extrapolate backwardsto obtain a list of possible valid usernames. You can use this as the basisfor automated password-guessing and other attacks.'),
(136, '4.9.3', 'Test Predictability of Autogenerated Credentials', 'If passwords are generated in a predictable way extrapolate the patternto obtain a list of possible passwords issued to other application users.This can be combined with any lists of usernames you obtain to performa password-guessing attack.'),
(137, '4.10.1', 'Check for Unsafe Transmission of Credentials', 'Walk through all authentication-related functions that involve transmissionof credentials including the main login account registrationpassword change and any page that allows viewing or updating ofuser profi le information. Monitor all traffi c passing in both directionsbetween the client and server using your intercepting proxy.'),
(138, '4.10.2', 'Check for Unsafe Transmission of Credentials', 'Identify every case in which the credentials are transmitted in eitherdirection. You can set interception rules in your proxy to fl ag messagescontaining specifi c strings.'),
(139, '4.10.3', 'Check for Unsafe Transmission of Credentials', 'If credentials are ever transmitted in the URL query string these arepotentially vulnerable to disclosure in the browser history on-screenin server logs and in the Referer header when third-party links arefollowed.'),
(140, '4.10.4', 'Check for Unsafe Transmission of Credentials', 'If credentials are ever stored in a cookie these are potentially vulnerableto disclosure via XSS attacks or local privacy attacks.'),
(141, '4.10.5', 'Check for Unsafe Transmission of Credentials', 'If credentials are ever transmitted from the server to the client thesemay be compromised via any vulnerabilities in session management oraccess controls or in an XSS attack.'),
(142, '4.10.6', 'Check for Unsafe Transmission of Credentials', 'If credentials are ever transmitted over an unencrypted connection theseare vulnerable to interception by an eavesdropper.'),
(143, '4.10.7', 'Check for Unsafe Transmission of Credentials', 'If credentials are submitted using HTTPS but the login form itself isloaded using HTTP the application is vulnerable to a man-in-the-middleattack that may be used to capture credentials.'),
(144, '4.11.1', 'Check for Unsafe Distribution of Credentials', 'If accounts are created via some out-of-band channel or the applicationhas a self-registration function that does not itself determine all ofa user’s initial credentials establish the means by which credentials aredistributed to new users. Common methods include sending a messageto an e-mail or postal address.Chapter 21 n A Web Application Hacker’s Methodology 811'),
(145, '4.11.2', 'Check for Unsafe Distribution of Credentials', 'If the application generates account activation URLs that are distributedout-of-band try to register several new accounts in close successionand identify any sequence in the URLs you receive. If a pattern canbe determined try to predict the URLs sent to recent and forthcomingusers and attempt to use these URLs to take ownership of theiraccounts.'),
(146, '4.11.3', 'Check for Unsafe Distribution of Credentials', 'Try to reuse a single activation URL multiple times and see if the applicationallows this. If it doesn’t try locking out the target account beforereusing the URL and see if the URL still works. Determine whether thisenables you to set a new password on an active account.'),
(147, '4.12.1', 'Test for Insecure Storage', 'If you gain access to hashed passwords check for accounts that sharethe same hashed password value. Try to log in with common passwordsfor the most common hashed value.'),
(148, '4.12.2', 'Test for Insecure Storage', 'Use an offl ine rainbow table for the hashing algorithm in question torecover the cleartext value.'),
(149, '4.13.1', 'Test for Logic Flaws', 'Test for Fail-Open Conditions'),
(150, '4.13.1.1', 'Test for Logic Flaws', 'For each function in which the application checks a user’s credentialsincluding the login and password change functions walk through theprocess in the normal way using an account you control. Note everyrequest parameter submitted to the application.'),
(151, '4.13.1.2', 'Test for Logic Flaws', 'Repeat the process numerous times modifying each parameter in turnin various unexpected ways designed to interfere with the application’slogic. For each parameter include the following changes:n Submit an empty string as the value.n Remove the name/value pair.n Submit very long and very short values.n Submit strings instead of numbers and vice versa.n Submit the same named parameter multiple times with the sameand different values.'),
(152, '4.13.1.3', 'Test for Logic Flaws', 'Review closely the application’s responses to the preceding requests. Ifany unexpected divergences from the base case occur feed this observationback into your framing of further test cases. If one modifi cationcauses a change in behavior try to combine this with other changes topush the application’s logic to its limits.'),
(153, '4.13.2', 'Test for Logic Flaws', 'Test Any Multistage Mechanisms'),
(154, '4.13.2.1', 'Test for Logic Flaws', 'If any authentication-related function involves submitting credentialsin a series of different requests identify the apparent purpose of eachdistinct stage and note the parameters submitted at each stage.'),
(155, '4.13.2.2', 'Test for Logic Flaws', 'Repeat the process numerous times modifying the sequence of requestsin ways designed to interfere with the application’s logic includingthe following tests:n Proceed through all stages but in a different sequence than the oneintended.n Proceed directly to each stage in turn and continue the normalsequence from there.n Proceed through the normal sequence several times skipping eachstage in turn and continuing the normal sequence from the next stage.n On the basis of your observations and the apparent purpose of eachstage of the mechanism try to think of further ways to modify thesequence and to access the different stages that the developers maynot have anticipated.'),
(156, '4.13.2.3', 'Test for Logic Flaws', 'Determine whether any single piece of information (such as the username)is submitted at more than one stage either because it is capturedmore than once from the user or because it is transmitted via the clientin a hidden form fi eld cookie or preset query string parameter. If so trysubmitting different values at different stages (both valid and invalid)and observing the effect. Try to determine whether the submitted itemis sometimes superfl uous or is validated at one stage and then trustedsubsequently or is validated at different stages against different checks.Try to exploit the application’s behavior to gain unauthorized accessor reduce the effectiveness of the controls imposed by the mechanism.'),
(157, '4.13.2.4', 'Test for Logic Flaws', 'Look for any data that is transmitted via the client that has not beencaptured from the user at any point. If hidden parameters are usedChapter 21 n A Web Application Hacker’s Methodology 813to track the state of the process across successive stages it may bepossible to interfere with the application’s logic by modifying theseparameters in crafted ways.'),
(158, '4.13.2.5', 'Test for Logic Flaws', 'If any part of the process involves the application’s presenting a randomlyvarying challenge test for two common defects:n If a parameter specifying the challenge is submitted along with theuser’s response determine whether you can effectively choose yourown challenge by modifying this value.n Try proceeding as far as the varying challenge several times withthe same username and determine whether a different challengeis presented. If it is you can effectively choose your own challengeby proceeding to this stage repeatedly until your desiredchallenge is presented.'),
(159, '4.14.1', 'Exploit Any Vulnerabilities to GainUnauthorized Access', 'Review any vulnerabilities you have identifi ed within the various authenticationfunctions and identify any that you can leverage to achieveyour objectives in attacking the application. This typically involvesattempting to authenticate as a different user — if possible a user withadministrative privileges.'),
(160, '4.14.2', 'Exploit Any Vulnerabilities to GainUnauthorized Access', 'Before mounting any kind of automated attack note any accountlockout defenses you have identifi ed. For example when performingusername enumeration against a login function submit a commonpassword with each request rather than a completely arbitrary valueso as not to waste a failed login attempt on every username discovered.Similarly perform any password-guessing attacks on a breadth-fi rstnot depth-fi rst basis. Start your word list with the most common weakpasswords and proceed through this list trying each item againstevery enumerated username.'),
(161, '4.14.3', 'Exploit Any Vulnerabilities to GainUnauthorized Access', 'Take account of the password quality rules and the completeness ofpassword validation when constructing word lists to use in any passwordguessingattack to avoid impossible or superfl uous test cases.'),
(162, '4.14.4', 'Exploit Any Vulnerabilities to GainUnauthorized Access', 'Use the techniques described in Chapter 14 to automate as muchwork as possible and maximize the speed and effectiveness of yourattacks.'),
(163, '5.1.1', 'Understand the Mechanism', 'Analyze the mechanism used to manage sessions and state. Establishwhether the application uses session tokens or some other method ofhandling the series of requests received from each user. Note that someauthentication technologies (such as HTTP authentication) may notrequire a full session mechanism to reidentify users post-authentication.Also some applications use a sessionless state mechanism in which allstate information is transmitted via the client usually in an encryptedor obfuscated form.'),
(164, '5.1.2', 'Understand the Mechanism', 'If the application uses session tokens confi rm precisely which piecesof data are actually used to reidentify users. Items that may be used totransmit tokens include HTTP cookies query string parameters andhidden form fi elds. Several different pieces of data may be used collectivelyto reidentify the user and different items may be used by differentback-end components. Often items that look like session tokens maynot actually be employed as such by the application such as the defaultcookie generated by the web server.Chapter 21 n A Web Application Hacker’s Methodology 815'),
(165, '5.1.3', 'Understand the Mechanism', 'To verify which items are actually being employed as session tokensfi nd a page or function that is certainly session-dependent (such as auser-specifi c My Details page). Then make several requests for it systematicallyremoving each item you suspect is being used as a sessiontoken. If removing an item stops the session-dependent page from beingreturned this may confi rm that the item is a session token. Burp Repeateris a useful tool for performing these tests.'),
(166, '5.1.4', 'Understand the Mechanism', 'Having established which items of data are actually being used to reidentifyusers for each token confi rm whether it is being validated in itsentirety or whether some subcomponents of the token are ignored.Change the token’s value 1 byte at a time and check whether the modified value is still accepted. If you fi nd that certain portions of the tokenare not actually used to maintain session state you can exclude thesefrom further analysis.'),
(167, '5.2.1', 'Test Tokens for Meaning', 'Log in as several different users at different times and record the tokensreceived from the server. If self-registration is available and you can chooseyour username log in with a series of similar usernames that have smallvariations such as A AA AAA AAAA AAAB AAAC AABA and soon. If other user-specifi c data is submitted at the login or is stored in userprofi les (such as an e-mail address) perform a similar exercise to modifythat data systematically and capture the resulting tokens.'),
(168, '5.2.2', 'Test Tokens for Meaning', 'Analyze the tokens you receive for any correlations that appear to berelated to the username and other user-controllable data.'),
(169, '5.2.3', 'Test Tokens for Meaning', 'Analyze the tokens for any detectable encoding or obfuscation. Lookfor a correlation between the length of the username and the length ofthe token which strongly indicates that some kind of obfuscation orencoding is in use. Where the username contains a sequence of the samecharacter look for a corresponding character sequence in the tokenwhich may indicate the use of XOR obfuscation. Look for sequences inthe token that contain only hexadecimal characters which may indicatehexadecimal encoding of an ASCII string or other information. Look forsequences ending in an equals sign and/or containing only the othervalid Base64 characters: a to z A to Z 0 to 9 + and /.'),
(170, '5.2.4', 'Test Tokens for Meaning', 'If you can identify any meaningful data within your sample of sessiontokens consider whether this is suffi cient to mount an attack that attemptsto guess the tokens recently issued to other application users. Find apage of the application that is session-dependent and use the techniques'),
(171, '5.3.1', 'Test Tokens for Predictability', 'Generate and capture a large number of session tokens in quick successionusing a request that causes the server to return a new token (forexample a successful login request).'),
(172, '5.3.2', 'Test Tokens for Predictability', 'Attempt to identify any patterns within your sample of tokens. In allcases you should use Burp Sequencer as described in Chapter 7 toperform detailed statistical tests of the randomness properties of theapplication’s tokens. Depending on the results it may also be useful toperform the following manual analysis:n Apply your understanding of which tokens and subsequences theapplication actually uses to reidentify users. Ignore any data that isnot used in this way even if it varies between samples.n If it is unclear what type of data is contained in the token or in anyindividual component of it try applying various decodings (for exampleBase64) to see if any more meaningful data emerges. It may benecessary to apply several decodings in sequence.n Try to identify any patterns in the sequences of values contained ineach decoded token or component. Calculate the differences betweensuccessive values. Even if these appear to be chaotic there may be afixed set of observed differences which narrows down the scope ofany brute-force attack considerably.n Obtain a similar sample of tokens after waiting for a few minutesand repeat the same analysis. Try to detect whether any of the tokens’content is time-dependent.'),
(173, '5.3.3', 'Test Tokens for Predictability', 'If you identify any patterns capture a second sample of tokens usinga different IP address and a different username. This will help youidentify whether the same pattern is detected and whether tokensreceived in the fi rst exercise could be extrapolated to guess tokensreceived in the second.'),
(174, '5.3.4', 'Test Tokens for Predictability', 'If you can identify any exploitable sequences or time dependenciesconsider whether this is suffi cient to mount an attack that attemptsto guess the tokens recently issued to other application users. Use thetechniques described in Chapter 14 to automate the task of generatingand testing possible tokens. Except in the simplest kind of sequencesit is likely that your attack will need to involve a customized scriptof some kind.Chapter 21 n A Web Application Hacker’s Methodology 817'),
(175, '5.3.5', 'Test Tokens for Predictability', 'If the session ID appears to be custom-written use the “bit fl ipper”payload source in Burp Intruder to sequentially modify each bit in thesession token in turn. Grep for a string in the response that indicateswhether modifying the token has not resulted in an invalid session andwhether the session belongs to a different user.'),
(176, '5.4.1', 'Check for Insecure Transmission of Tokens', 'Walk through the application as normal starting with unauthenticatedcontent at the start URL proceeding through the login process andthen going through all the application’s functionality. Make a noteof every occasion on which a new session token is issued and whichportions of your communications use HTTP and which use HTTPS.You can use the logging function of your intercepting proxy to recordthis information.');
INSERT INTO `help_info` (`id`, `stepnum`, `category`, `data`) VALUES
(177, '5.4.2', 'Check for Insecure Transmission of Tokens', 'If HTTP cookies are being used as the transmission mechanism for sessiontokens verify whether the secure fl ag is set preventing them fromever being transmitted over HTTP connections.'),
(178, '5.4.3', 'Check for Insecure Transmission of Tokens', 'Determine whether in the normal use of the application session tokensare ever transmitted over an HTTP connection. If so they are vulnerableto interception.'),
(179, '5.4.4', 'Check for Insecure Transmission of Tokens', 'In cases where the application uses HTTP for unauthenticated areasand switches to HTTPS for the login and/or authenticated areas ofthe application verify whether a new token is issued for the HTTPSportion of the communications or whether a token issued during theHTTP stage remains active when the application switches to HTTPS.If a token issued during the HTTP stage remains active the token isvulnerable to interception.'),
(180, '5.4.5', 'Check for Insecure Transmission of Tokens', 'If the HTTPS area of the application contains any links to HTTP URLsfollow these and verify whether the session token is submitted. If it isdetermine whether it continues to be valid or is immediately terminatedby the server.'),
(181, '5.5.1', 'Check for Disclosure of Tokens in Logs', 'If your application mapping exercises identifi ed any logging monitoringor diagnostic functionality review these functions closely to determinewhether any session tokens are disclosed within them. Confi rm who isnormally authorized to access these functions. If they are intended foradministrators only determine whether any other vulnerabilities existthat could enable a lower-privileged user to access them.'),
(182, '5.5.2', 'Check for Disclosure of Tokens in Logs', 'Identify any instances where session tokens are transmitted within theURL. It may be that tokens are generally transmitted in a more securemanner but that developers have used the URL in specifi c cases towork around a particular problem. If so these may be transmitted inthe Referer header when users follow any off-site links. Check for anyfunctionality that enables you to inject arbitrary off-site links into pagesviewed by other users.'),
(183, '5.5.3', 'Check for Disclosure of Tokens in Logs', 'If you fi nd any way to gather valid session tokens issued to other userslook for a way to test each token to determine whether it belongs to anadministrative user (for example by attempting to access a privilegedfunction using the token).'),
(184, '5.6.1', 'Check Mapping of Tokens to Sessions', 'Log in to the application twice using the same user account either fromdifferent browser processes or from different computers. Determinewhether both sessions remain active concurrently. If they do the applicationsupports concurrent sessions enabling an attacker who hascompromised another user’s credentials to use these without risk ofdetection.'),
(185, '5.6.2', 'Check Mapping of Tokens to Sessions', 'Log in and log out several times using the same user account either fromdifferent browser processes or from different computers. Determinewhether a new session token is issued each time or whether the sametoken is issued every time the same account logs in. If the latter occursthe application is not really employing proper session tokens but isusing unique persistent strings to reidentify each user. In this situationthere is no way to protect against concurrent logins or properly enforcesession timeout.'),
(186, '5.6.3', 'Check Mapping of Tokens to Sessions', 'If tokens appear to contain any structure and meaning attempt to separateout components that may identify the user from those that appear to beinscrutable. Try to modify any user-related components of the token sothat they refer to other known users of the application. Verify whetherthe application accepts the resulting token and whether it enables youto masquerade as that user. See Chapter 7 for examples of this kind ofsubtle vulnerability.'),
(187, '5.7.1', 'Test Session Termination', 'When testing for session timeout and logout fl aws focus solely on theserver’s handling of sessions and tokens rather than any events that occuron the client. In terms of session termination nothing much depends onwhat happens to the token within the client browser.Chapter 21 n A Web Application Hacker’s Methodology 819'),
(188, '5.7.2', 'Test Session Termination', 'Check whether session expiration is implemented on the server:n Log in to the application to obtain a valid session token.n Wait for a period without using this token and then submit a requestfor a protected page (such as My Details) using the token.n If the page is displayed normally the token is still active.n Use trial and error to determine how long any session expirationtimeout is or whether a token can still be used days after the previousrequest that used it. Burp Intruder can be configured to incrementthe time interval between successive requests to automate this task.'),
(189, '5.7.3', 'Test Session Termination', 'Check whether a logout function exists. If it does test whether it effectivelyinvalidates the user’s session on the server. After logging outattempt to reuse the old token and determine whether it is still valid byrequesting a protected page using the token. If the session is still activeusers remain vulnerable to some session hijacking attacks even afterthey have “logged out.” You can use Burp Repeater to keep sending aspecifi c request from the proxy history to see whether the applicationresponds differently after you log out.'),
(190, '5.8.1', 'Check for Session Fixation', 'If the application issues session tokens to unauthenticated users obtaina token and perform a login. If the application does not issue a freshtoken following a successful login it is vulnerable to session fi xation.'),
(191, '5.8.2', 'Check for Session Fixation', 'Even if the application does not issue session tokens to unauthenticatedusers obtain a token by logging in and then return to the login page. Ifthe application is willing to return this page even though you are alreadyauthenticated submit another login as a different user using the sametoken. If the application does not issue a fresh token after the secondlogin it is vulnerable to session fi xation.'),
(192, '5.8.3', 'Check for Session Fixation', 'Identify the format of session tokens that the application uses. Modifyyour token to an invented value that is validly formed and attempt tolog in. If the application allows you to create an authenticated sessionusing an invented token it is vulnerable to session fi xation.'),
(193, '5.8.4', 'Check for Session Fixation', 'If the application does not support login but processes sensitive userinformation (such as personal and payment details) and allows this tobe displayed after submission (such as on a Verify My Order page)carry out the preceding three tests in relation to the pages displayingsensitive data. If a token set during anonymous usage of the applicationcan later be used to retrieve sensitive user information the applicationis vulnerable to session fi xation.'),
(194, '5.9.1', 'Check for CSRF', 'If the application relies solely on HTTP cookies as its method of transmittingsession tokens it may be vulnerable to cross-site request forgeryattacks.'),
(195, '5.9.2', 'Check for CSRF', 'Review the application’s key functionality and identify the specifi crequests that are used to perform sensitive actions. If an attacker canfully determine in advance parameters for any of these requests (thatis they do not contain any session tokens unpredictable data or othersecrets) the application is almost certainly vulnerable.'),
(196, '5.9.3', 'Check for CSRF', 'Create an HTML page that will issue the desired request without anyuser interaction. For GET requests you can place an <img> tag with thesrc parameter set to the vulnerable URL. For POST requests you cancreate a form that contains hidden fi elds for all the relevant parametersrequired for the attack and that has its target set to the vulnerableURL. You can use JavaScript to autosubmit the form as soon as thepage loads. While logged in to the application use the same browserto load your HTML page. Verify that the desired action is carried outwithin the application.'),
(197, '5.9.4', 'Check for CSRF', 'If the application uses additional tokens within requests in an attempt toprevent CSRF attacks test the robustness of these in the same manner asfor session tokens. Also test whether the application is vulnerable to UIredress attacks in order to defeat the anti-CSRF defenses (see Chapter 13for more details).'),
(198, '5.10.1', 'Check Cookie Scope', 'If the application uses HTTP cookies to transmit session tokens (orany other sensitive data) review the relevant Set-Cookie headers andcheck for any domain or path attributes used to control the scope of thecookies.'),
(199, '5.10.2', 'Check Cookie Scope', 'If the application explicitly liberalizes its cookies’ scope to a parentdomain or parent directory it may be leaving itself vulnerable to attacksvia other web applications that are hosted within the parent domainor directory.'),
(200, '5.10.3', 'Check Cookie Scope', 'If the application sets its cookies’ domain scope to its own domainname (or does not specify a domain attribute) it may still be exposedto attacks via any applications hosted on subdomains. This is a consequenceof how cookie scoping works. It cannot be avoided other thanby not hosting any other applications on a subdomain of a securitysensitiveapplication.Chapter 21 n A Web Application Hacker’s Methodology 821'),
(201, '5.10.4', 'Check Cookie Scope', 'Determine any reliance on segregation by path such as /site/main and/site/demo which can be subverted in the event of a cross-site scriptingattack.'),
(202, '5.10.5', 'Check Cookie Scope', 'Identify all the possible domain names and paths that will receive thecookies that the application issues. Establish whether any other webapplications are accessible via these domain names or paths that youmay be able to leverage to capture the cookies issued to users of thetarget application.'),
(203, '6.1.1', 'Understand the Access Control Requirements', 'Based on the core functionality implemented within the applicationunderstand the broad requirements for access control in terms of verticalsegregation (different levels of users have access to different typesof functionality) and horizontal segregation (users at the same privilegelevel have access to different subsets of data). Often both types of segregationare present. For example ordinary users may be able to accesstheir own data while administrators can access everyone’s data.'),
(204, '6.1.2', 'Understand the Access Control Requirements', 'Review your application mapping results to identify the areas of functionalityand types of data resources that represent the most fruitfultargets for privilege escalation attacks.'),
(205, '6.1.3', 'Understand the Access Control Requirements', 'To perform the most effective testing for access control vulnerabilitiesyou should ideally obtain a number of different accounts with differentvertical and horizontal privileges. If self-registration is possible you canprobably obtain the latter directly from the application. To obtain theformer you will probably need the cooperation of the application owner(or need to exploit some vulnerability to gain access to a high-privilegedaccount). The availability of different kinds of accounts will affect thetypes of testing you can perform as described next.'),
(206, '6.2.1', 'Test with Multiple Accounts', 'If the application enforces vertical privilege segregation fi rst use apowerful account to locate all the functionality it can access. Thenuse a less-privileged account and attempt to access each item of thisfunctionality.'),
(207, '6.2.1.1', 'Test with Multiple Accounts', 'Using Burp browse all the application’s content within one usercontext.'),
(208, '6.2.1.2', 'Test with Multiple Accounts', 'Review the contents of Burp’s site map to ensure you haveidentifi ed all the functionality you want to test. Then log outof the application and log back in using a different user context.Use the context menu to select the “compare site maps” featureto determine which high-privileged requests may be accessible tothe lower-privileged user. See Chapter 8 for more details onthis technique.'),
(209, '6.2.2', 'Test with Multiple Accounts', 'If the application enforces horizontal privilege segregation performthe equivalent test using two different accounts at the same privilegelevel attempting to use one account to access data belonging to theother account. This typically involves replacing an identifi er (such asa document ID) within a request to specify a resource belonging to theother user.'),
(210, '6.2.3', 'Test with Multiple Accounts', 'Perform manual checking of key access control logic.'),
(211, '6.2.3.1', 'Test with Multiple Accounts', 'For each user privilege review resources available to a user.Attempt to access those resources from an unauthorized useraccount by replaying the request using the unauthorized user’ssession token.'),
(212, '6.2.4', 'Test with Multiple Accounts', 'When you perform any kind of access control test be sure to test every stepof multistage functions individually to confi rm whether access controlshave been properly implemented at each stage or whether the applicationassumes that users who access a later stage must have passed securitychecks implemented at the earlier stages. For example if an administrativepage containing a form is properly protected check whether the actualform submission is also subjected to proper access controls.'),
(213, '6.3.1', 'Test with Limited Access', 'If you do not have prior access to accounts at different privilege levels orto multiple accounts with access to different data testing for broken accesscontrols is not quite as straightforward. Many common vulnerabilities willbe much harder to locate because you do not know the names of the URLsidentifi ers and parameters that are needed to exploit the weaknesses.Chapter 21 n A Web Application Hacker’s Methodology 823'),
(214, '6.3.2', 'Test with Limited Access', 'In your application mapping exercises that use a low-privileged accountyou may have identifi ed the URLs for privileged functions such asadministrative interfaces. If these are not adequately protected you willprobably already know about this.'),
(215, '6.3.3', 'Test with Limited Access', 'Decompile all compiled clients that are present and extract any referencesto server-side functionality.'),
(216, '6.3.4', 'Test with Limited Access', 'Most data that is subject to horizontal access controls is accessed usingan identifi er such as an account number or order reference. To testwhether access controls are effective using only a single account youmust try to guess or discover the identifi ers associated with other users’data. If possible generate a series of identifi ers in quick succession(for example by creating several new orders). Attempt to identify anypatterns that may enable you to predict the identifi ers issued to otherusers. If there is no way to generate new identifi ers you are probablyrestricted to analyzing those you already have and guessing on thatbasis.'),
(217, '6.3.5', 'Test with Limited Access', 'If you fi nd a way to predict the identifi ers issued to other users use thetechniques described in Chapter 14 to mount an automated attack toharvest interesting data belonging to other users. Use the Extract Grepfunction in Burp Intruder to capture the relevant information from withinthe application’s responses.'),
(218, '6.4.1', 'Test for Insecure Access Control Methods', 'Some applications implement access controls based on requestparameters in an inherently unsafe way. Look for parameters suchas edit=false or access=read in any key requests and modify thesein line with their apparent role to try to interfere with the application’saccess control logic.'),
(219, '6.4.2', 'Test for Insecure Access Control Methods', 'Some applications base access control decisions on the HTTP Refererheader. For example an application may properly control access to/admin.jsp and accept any request showing this as its Referer. To testfor this behavior attempt to perform some privileged actions to whichyou are authorized and submit a missing or modifi ed Referer header.If this change causes the application to block your request it may beusing the Referer header in an unsafe way. Try performing the sameaction as an unauthorized user but supply the original Referer headerand see whether the action succeeds.'),
(220, '6.4.3', 'Test for Insecure Access Control Methods', 'If HEAD is an allowed method on the site test for insecure containermanagedaccess control to URLs. Make a request using the HEAD methodto determine whether the application permits it.'),
(221, '7.1.1', 'Fuzz All Request Parameters', 'Review the results of your application mapping exercises and identifyevery distinct client request that submits parameters that the server-sideapplication processes. Relevant parameters include items within the URLquery string parameters in the request body and HTTP cookies. Alsoinclude any other items of user input that have been observed to have aneffect on the application’s behavior such as the Referer or User-Agentheaders.'),
(222, '7.1.2', 'Fuzz All Request Parameters', 'To fuzz the parameters you can use your own scripts or a ready-madefuzzing tool. For example to use Burp Intruder load each request inturn into the tool. An easy way to do this is to intercept a request in BurpProxy and select the Send to Intruder action or right-click an item in theBurp Proxy history and select this option. Using this option confi guresBurp Intruder with the contents of the request along with the correcttarget host and port. It also automatically marks the values of all requestparameters as payload positions ready for fuzzing.'),
(223, '7.1.3', 'Fuzz All Request Parameters', 'Using the payloads tab confi gure a suitable set of attack payloads toprobe for vulnerabilities within the application. You can enter payloadsmanually load them from a fi le or select one of the preset payload lists.Fuzzing every request parameter within the application typically entailsissuing a large number of requests and reviewing the results for anomalies.If your set of attack strings is too large this can be counterproductiveChapter 21 n A Web Application Hacker’s Methodology 825and generate a prohibitively large amount of output for you to review.Hence a sensible approach is to target a range of common vulnerabilitiesthat can often be easily detected in anomalous responses to specifi ccrafted inputs and that often manifest themselves anywhere withinthe application rather than within specifi c types of functionality. Hereis a suitable set of payloads that you can use to test for some commoncategories of vulnerabilities:SQL Injection‘‘--‘; waitfor delay ‘0:30:0’--'),
(224, '1', 'Fuzz All Request Parameters', '; waitfor delay ‘0:30:0’--XSS and Header Injectionxsstest“><script>alert(‘xss’)</script>OS Command Injection|| ping -i 30 127.0.0.1 ; x || ping -n 30 127.0.0.1 &| ping –i 30 127.0.0.1 || ping –n 30 127.0.0.1 |& ping –i 30 127.0.0.1 && ping –n 30 127.0.0.1 &; ping 127.0.0.1 ;%0a ping –i 30 127.0.0.1 %0a` ping 127.0.0.1 `Path Traversal../../../../../../../../../../etc/passwd../../../../../../../../../../boot.ini..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\etc\\passwd..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\boot.iniScript Injection;echo 111111echo 111111response.write 111111:response.write 111111File Inclusionhttp://<your server name>/http://<nonexistent IP address>/'),
(225, '7.1.4', 'Fuzz All Request Parameters', 'All the preceding payloads are shown in their literal form. The characters? ; & + = and space need to be URL-encoded because they have special'),
(227, '7.1.5', 'Fuzz All Request Parameters', 'In the Grep function of Burp Intruder confi gure a suitable set of stringsto fl ag some common error messages within responses. For example:errorexceptionillegalinvalidfailstackaccessdirectoryfilenot foundvarcharODBCSQLSELECT'),
(228, '111111', 'Fuzz All Request Parameters', 'Note that the string 111111 is included to test for successful script injectionattacks. The payloads in step 7.1.3 involve writing this value intothe server’s response.'),
(229, '7.1.6', 'Fuzz All Request Parameters', 'Also select the Payload Grep option to fl ag responses that contain thepayload itself indicating a potential XSS or header injection vulnerability.'),
(230, '7.1.7', 'Fuzz All Request Parameters', 'Set up a web server or netcat listener on the host you specifi ed in thefi rst fi le inclusion payload. This helps you monitor for connectionattempts received from the server resulting from a successful remotefi le inclusion attack.'),
(231, '7.1.8', 'Fuzz All Request Parameters', 'Launch the attack. When it has completed review the results for anomalousresponses indicating the presence of vulnerabilities. Check fordivergences in the HTTP status code the response length the responsetime the appearance of your confi gured expressions and the appearanceof the payload itself. You can click each column heading in the resultstable to sort the results by the values in that column (and Shift-clickto reverse-sort the results). This enables you to quickly identify anyanomalies that stand out from the other results.'),
(232, '7.1.9', 'Fuzz All Request Parameters', 'For each potential vulnerability indicated by the results of your fuzz testingrefer to the following sections of this methodology. They describethe detailed steps you should take in relation to each category of problemto verify the existence of a vulnerability and successfully exploit it.Chapter 21 n A Web Application Hacker’s Methodology 827'),
(233, '7.1.10', 'Fuzz All Request Parameters', 'After you have confi gured Burp Intruder to perform a fuzz test of a singlerequest you can quickly repeat the same test on other requests withinthe application. Simply select each target request within Burp Proxy andchoose the Send to Intruder option. Then immediately launch the attackwithin Intruder using the existing attack confi guration. In this way youcan launch a large number of tests simultaneously in separate windowsand manually review the results as each test completes its work.'),
(234, '7.1.11', 'Fuzz All Request Parameters', 'If your mapping exercises identifi ed any out-of-band input channelswhereby user-controllable input can be introduced into the application’sprocessing you should perform a similar fuzzing exercise on these inputchannels. Submit various crafted data designed to trigger common vulnerabilitieswhen processed within the web application. Depending onthe nature of the input channel you may need to create a custom scriptor other harness for this purpose.'),
(235, '7.1.12', 'Fuzz All Request Parameters', 'In addition to your own fuzzing of application requests if you have accessto an automated web application vulnerability scanner you should runit against the target application to provide a basis for comparison withyour own fi ndings.'),
(236, '7.2.1', 'Test for SQL Injection', 'If the SQL attack strings listed in step 7.1.3 result in any anomalousresponses probe the application’s handling of the relevant parametermanually to determine whether a SQL injection vulnerability is present.'),
(237, '7.2.2', 'Test for SQL Injection', 'If any database error messages were returned investigate their meaning.Use the section “SQL Syntax and Error Reference” in Chapter 9 to helpinterpret error messages on some common database platforms.'),
(238, '7.2.3', 'Test for SQL Injection', 'If submitting a single quotation mark in the parameter causes an erroror other anomalous behavior submit two single quotation marks. If thisinput causes the error or anomalous behavior to disappear the applicationis probably vulnerable to SQL injection.'),
(239, '7.2.4', 'Test for SQL Injection', 'Try using common SQL string concatenator functions to construct a stringthat is equivalent to some benign input. If this causes the same responseas the original benign input the application is probably vulnerable. Forexample if the original input is the expression FOO you can performthis test using the following items (in the third example note the spacebetween the two quotes):‘||’FOO‘+’FOO‘ ‘FOO'),
(240, '7.2.5', 'Test for SQL Injection', 'If the original input is numeric try using a mathematical expression thatis equivalent to the original value. For example if the original value was'),
(241, '2', 'Test for SQL Injection', 'try submitting 1+1 or 3–1. If the application responds in the same wayit may be vulnerable particularly if the value of the numeric expressionhas a systematic effect on the application’s behavior.'),
(242, '7.2.6', 'Test for SQL Injection', 'If the preceding test is successful you can gain further assurance thata SQL injection vulnerability is involved by using SQL-specifi c mathematicalexpressions to construct a particular value. If the application’slogic can be systematically manipulated in this way it is almost certainlyvulnerable to SQL injection. For example both of the following itemsare equivalent to the number 2:'),
(243, '67', 'Test for SQL Injection', '#NAME?'),
(244, '51', 'Test for SQL Injection', '#NAME?'),
(245, '7.2.7', 'Test for SQL Injection', 'If either of the fuzz test cases using the waitfor command resultedin an abnormal time delay before the application responded this is astrong indicator that the database type is MS-SQL and the applicationis vulnerable to SQL injection. Repeat the test manually specifying differentvalues in the waitfor parameter and determine whether the timetaken to respond varies systematically with this value. Note that yourattack payload may be inserted into more than one SQL query so thetime delay observed may be a fi xed multiple of the value specifi ed.'),
(246, '7.2.8', 'Test for SQL Injection', 'If the application is vulnerable to SQL injection consider what kindsof attacks are feasible and likely to help you achieve your objectives.Refer to Chapter 9 for the detailed steps needed to carry out any of thefollowing attacks:n Modify the conditions within a WHERE clause to change the application’slogic (for example by injecting or 1=1-- to bypass a login).n Use the UNION operator to inject an arbitrary SELECT query and combinethe results with those of the application’s original query.n Fingerprint the database type using database-specific SQL syntax.n If the database type is MS-SQL and the application returns ODBC errormessages in its responses leverage these to enumerate the databasestructure and retrieve arbitrary data.n If you cannot find a way to directly retrieve the results of an arbitraryinjected query use the following advanced techniques to extract data:n Retrieve string data in numeric form one byte at a time.n Use an out-of-band channel.Chapter 21 n A Web Application Hacker’s Methodology 829n If you can cause different application responses based on a singlearbitrary condition use Absinthe to extract arbitrary data one bitat a time.n If you can trigger time delays based on a single arbitrary conditionexploit these to retrieve data one bit at a time.n If the application is blocking certain characters or expressions thatyou require to perform a particular attack try the various bypasstechniques described in Chapter 9 to circumvent the input filter.n If possible escalate the attack against the database and the underlyingserver by leveraging any vulnerabilities or powerful functionswithin the database.'),
(247, '7.3.1', 'Test for XSS and Other Response Injection', 'Identify Refl ected Request Parameters'),
(248, '7.3.1.1', 'Test for XSS and Other Response Injection', 'Sort the results of your fuzz testing by clicking the Payload Grep columnand identify any matches corresponding to the XSS payloads listed instep 7.1.3. These are cases where the XSS test strings were returnedunmodifi ed within the application’s responses.'),
(249, '7.3.1.2', 'Test for XSS and Other Response Injection', 'For each of these cases review the application’s response to fi nd the locationof the supplied input. If this appears within the response body testfor XSS vulnerabilities. If the input appears within any HTTP header testfor header injection vulnerabilities. If it is used in the Location headerof a 302 response or if it is used to specify a redirect in some other waytest for redirection vulnerabilities. Note that the same input might becopied into multiple locations within the response and that more thanone type of refl ected vulnerability might be present.'),
(250, '7.3.2', 'Test for XSS and Other Response Injection', 'Test for Refl ected XSS'),
(251, '7.3.2.1', 'Test for XSS and Other Response Injection', 'For each place within the response body where the value of the requestparameter appears review the surrounding HTML to identify possibleways of crafting your input to cause execution of arbitrary JavaScript.For example you can inject <script> tags inject into an existing scriptor place a crafted value into a tag attribute.'),
(252, '7.3.2.2', 'Test for XSS and Other Response Injection', 'Use the different methods of beating signature-based fi lters described inChapter 12 as a reference for the different ways in which crafted inputcan be used to cause execution of JavaScript.'),
(253, '7.3.2.3', 'Test for XSS and Other Response Injection', 'Try submitting various possible exploits to the application and monitorits responses to determine whether any fi ltering or sanitization of input'),
(255, '7.3.2.4', 'Test for XSS and Other Response Injection', 'If you fi nd that the application is blocking input containing certaincharacters or expressions you need to use or is HTML-encoding certaincharacters try the various fi lter bypasses described in Chapter 12.'),
(256, '7.3.2.5', 'Test for XSS and Other Response Injection', 'If you fi nd an XSS vulnerability in a POST request this can still beexploited via a malicious website that contains a form with the requiredparameters and a script to automatically submit the form. Neverthelessa wider range of attack delivery mechanisms is available if the exploitcan be delivered via a GET request. Try submitting the same parametersin a GET request and see if the attack still succeeds. You can use theChange Request Method action in Burp Proxy to convert the requestfor you.'),
(257, '7.3.3', 'Test for XSS and Other Response Injection', 'Test for HTTP Header Injection'),
(258, '7.3.3.1', 'Test for XSS and Other Response Injection', 'For each place within the response headers where the value of the requestparameter appears verify whether the application accepts data containingURL-encoded carriage-return (%0d) and line-feed (%0a) charactersand whether these are returned unsanitized in its response. (Note thatyou are looking for the actual newline characters themselves to appearin the server’s response not their URL-encoded equivalents.)'),
(259, '7.3.3.2', 'Test for XSS and Other Response Injection', 'If a new line appears in the server’s response headers when you supplycrafted input the application is vulnerable to HTTP header injection.This can be leveraged to perform various attacks as described inChapter 13.'),
(260, '7.3.3.3', 'Test for XSS and Other Response Injection', 'If you fi nd that only one of the two newline characters gets returned inthe server’s responses it may still be possible to craft a working exploitdepending on the context and the target user’s browser.'),
(261, '7.3.3.4', 'Test for XSS and Other Response Injection', 'If you fi nd that the application blocks input containing newline charactersor sanitizes those characters in its response try the following itemsof input to test the fi lter’s effectiveness:foo%00%0d%0abarfoo%250d%250abarfoo%%0d0d%%0a0abar'),
(262, '7.3.4', 'Test for XSS and Other Response Injection', 'Test for Open Redirection'),
(263, '7.3.4.1', 'Test for XSS and Other Response Injection', 'If the refl ected input is used to specify the target of a redirect of somekind test whether it is possible to supply crafted input that results inChapter 21 n A Web Application Hacker’s Methodology 831an arbitrary redirect to an external website. If so this behavior can beexploited to lend credibility to a phishing-style attack.'),
(264, '7.3.4.2', 'Test for XSS and Other Response Injection', 'If the application ordinarily transmits an absolute URL as the parameter’svalue modify the domain name within the URL and test whether theapplication redirects you to the different domain.'),
(265, '7.3.4.3', 'Test for XSS and Other Response Injection', 'If the parameter normally contains a relative URL modify this into anabsolute URL for a different domain and test whether the applicationredirects you to this domain.'),
(266, '7.3.4.4', 'Test for XSS and Other Response Injection', 'If the application carries out some validation on the parameter beforeperforming the redirect in an effort to prevent external redirectionthis is often vulnerable to bypasses. Try the various attacks describedin Chapter 13 to test the robustness of the fi lters.'),
(267, '7.3.5', 'Test for XSS and Other Response Injection', 'Test for Stored Attacks'),
(268, '7.3.5.1', 'Test for XSS and Other Response Injection', 'If the application stores items of user-supplied input and later displays theseon-screen after you have fuzzed the entire application you may observesome of your attack strings being returned in responses to requests that didnot themselves contain those strings. Note any instances where this occursand identify the original entry point for the data that is being stored.'),
(269, '7.3.5.2', 'Test for XSS and Other Response Injection', 'In some cases user-supplied data is stored successfully only if you completea multistage process which does not occur in basic fuzz testing. Ifyour application mapping exercises identifi ed any functionality of thiskind manually walk through the relevant process and test the storeddata for XSS vulnerabilities.'),
(270, '7.3.5.3', 'Test for XSS and Other Response Injection', 'If you have suffi cient access to test it review closely any administrativefunctionality in which data originating from low-privileged users isultimately rendered on-screen in the session of more privileged users.Any stored XSS vulnerabilities in functionality of this kind typically leaddirectly to privilege escalation.'),
(271, '7.3.5.4', 'Test for XSS and Other Response Injection', 'Test every instance where user-supplied data is stored and displayedto users. Probe these for XSS and the other response injection attacksdescribed previously.'),
(272, '7.3.5.5', 'Test for XSS and Other Response Injection', 'If you fi nd a vulnerability in which input supplied by one user is displayedto other users determine the most effective attack payload with whichyou can achieve your objectives such as session hijacking or requestforgery. If the stored data is displayed only to the same user from whomit originated try to fi nd ways of chaining any other vulnerabilities youhave discovered (such as broken access controls) to inject an attack intoother users’ sessions.'),
(273, '7.3.5.6', 'Test for XSS and Other Response Injection', 'If the application allows upload and download of fi les always probe thisfunctionality for stored XSS attacks. If the application allows HTML JARor text fi les and does not validate or sanitize their contents it is almostcertainly vulnerable. If it allows JPEG fi les and does not validate thatthey contain valid images it is probably vulnerable to attacks againstInternet Explorer users. Test the application’s handling of each fi le typeit supports and confi rm how browsers handle responses containingHTML instead of the normal content type.'),
(274, '7.3.5.7', 'Test for XSS and Other Response Injection', 'In every location where data submitted by one user is displayed to otherusers but where the application’s fi lters prevent you from performinga stored XSS attack review whether the application’s behavior leavesit vulnerable to on-site request forgery.'),
(275, '7.4.1', 'Test for OS Command Injection', 'If any of the command injection attack strings listed in step 7.1.3 resultedin an abnormal time delay before the application responded this is astrong indicator that the application is vulnerable to OS command injection.Repeat the test manually specifying different values in the -i or-n parameter and determine whether the time taken to respond variessystematically with this value.'),
(276, '7.4.2', 'Test for OS Command Injection', 'Using whichever of the injection strings was found to be successful tryinjecting a more interesting command (such as ls or dir) and determinewhether you can retrieve the results of the command to your browser.'),
(277, '7.4.3', 'Test for OS Command Injection', 'If you are unable to retrieve results directly other options are open toyou:n You can attempt to open an out-of-band channel back to your computer.Try using TFTP to copy tools up to the server using telnet ornetcat to create a reverse shell back to your computer and using themail command to send command output via SMTP.n You can redirect the results of your commands to a file within theweb root which you can then retrieve directly using your browser.For example:dir > c:\\inetpub\\wwwroot\\foo.txt'),
(278, '7.4.4', 'Test for OS Command Injection', 'If you fi nd a way to inject commands and retrieve the results you shoulddetermine your privilege level (by using whoami or a similar commandor attempting to write a harmless fi le to a protected directory). Youmay then seek to escalate privileges gain backdoor access to sensitiveapplication data or attack other hosts that can be reached from thecompromised server.Chapter 21 n A Web Application Hacker’s Methodology 833'),
(279, '7.4.5', 'Test for OS Command Injection', 'If you believe that your input is being passed to an OS command ofsome kind but the attack strings listed are unsuccessful see if you canuse the < or > character to direct the contents of a fi le to the command’sinput or to direct the command’s output to a fi le. This may enable youto read or write arbitrary fi le contents. If you know or can guess theactual command being executed try injecting command-line parametersassociated with that command to modify its behavior in useful ways(for example by specifying an output fi le within the web root).'),
(280, '7.4.6', 'Test for OS Command Injection', 'If you fi nd that the application is escaping certain key characters you needto perform a command injection attack try placing the escape characterbefore each such character. If the application does not escape the escapecharacter itself this usually leads to a bypass of this defensive measure.If you fi nd that whitespace characters are blocked or sanitized you maybe able to use $IFS in place of spaces on UNIX-based platforms.'),
(281, '7.5.1', 'Test for Path Traversal', 'For each fuzz test you have performed review the results generatedby the path traversal attack strings listed in step 7.1.3. You can click thetop of the payload column in Burp Intruder to sort the results table bypayload and group the results for these strings. For any cases wherean unusual error message or a response with an abnormal length wasreceived review the response manually to determine whether it containsthe contents of the specifi ed fi le or other evidence that an anomalousfi le operation occurred.'),
(282, '7.5.2', 'Test for Path Traversal', 'In your mapping of the application’s attack surface you should havenoted any functionality that specifi cally supports the reading and writingof fi les on the basis of user-supplied input. In addition to the generalfuzzing of all parameters you should manually test this functionalityvery carefully to identify any path traversal vulnerabilities that exist.'),
(283, '7.5.3', 'Test for Path Traversal', 'Where a parameter appears to contain a fi lename a portion of a fi lenameor a directory modify the parameter’s existing value to insert anarbitrary subdirectory and a single traversal sequence. For example ifthe application submits this parameter:file=foo/file1.txttry submitting this value:file=foo/bar/../file1.txtIf the application’s behavior is identical in the two cases it may bevulnerable and you should proceed to the next step. If the behavioris different the application may be blocking stripping or sanitizing'),
(285, '7.5.4', 'Test for Path Traversal', 'If the preceding test of using traversal sequences within the basedirectory is successful try using additional sequences to step abovethe base directory and access known fi les on the server’s operatingsystem. If these attempts fail the application may be imposing variousfi lters or checks before fi le access is granted. You should probefurther to understand the controls that are implemented and whetherany bypasses exist.'),
(286, '7.5.5', 'Test for Path Traversal', 'The application may be checking the fi le extension being requestedand allowing access to only certain kinds of fi les. Try using a null byteor newline attack together with a known accepted fi le extension in anattempt to bypass the fi lter. For example:../../../../../boot.ini%00.jpg../../../../../etc/passwd%0a.jpg'),
(287, '7.5.6', 'Test for Path Traversal', 'The application may be checking that the user-supplied fi le path starts witha particular directory or stem. Try appending traversal sequences aftera known accepted stem in an attempt to bypass the fi lter. For example:/images/../../../../../../../etc/passwd'),
(288, '7.5.7', 'Test for Path Traversal', 'If these attacks are unsuccessful try combining multiple bypassesworking initially entirely within the base directory in an attempt tounderstand the fi lters in place and the ways in which the applicationhandles unexpected input.'),
(289, '7.5.8', 'Test for Path Traversal', 'If you succeed in gaining read access to arbitrary fi les on the serverattempt to retrieve any of the following fi les which may enable you toescalate your attack:n Password files for the operating system and applicationn Server and application configuration files to discover other vulnerabilitiesor fine-tune a different attackn Include files that may contain database credentialsn Data sources used by the application such as MySQL database filesor XML filesn The source code to server-executable pages to perform a code reviewin search of bugsn Application log files that may contain information such as usernamesand session tokensChapter 21 n A Web Application Hacker’s Methodology 835'),
(290, '7.5.9', 'Test for Path Traversal', 'If you succeed in gaining write access to arbitrary fi les on the serverexamine whether any of the following attacks are feasible in order toescalate your attack:n Creating scripts in users’ startup foldersn Modifying files such as in.ftpd to execute arbitrary commands whena user next connectsn Writing scripts to a web directory with execute permissions and callingthem from your browser'),
(291, '7.6.1', 'Test for Script Injection', 'For each fuzz test you have performed review the results for the string'),
(292, '111111', 'Test for Script Injection', 'on its own (that is not preceded by the rest of the test string).You can quickly identify these in Burp Intruder by Shift-clicking theheading for the 111111 Grep string to group all the results containingthis string. Look for any that do not have a check in the Payload Grepcolumn. Any cases identifi ed are likely to be vulnerable to injection ofscripting commands.'),
(293, '7.6.2', 'Test for Script Injection', 'Review all the test cases that used script injection strings and identifyany containing scripting error messages that may indicate that your inputis being executed but caused an error. These may need to be fi ne-tunedto perform successful script injection.'),
(294, '7.6.3', 'Test for Script Injection', 'If the application appears to be vulnerable verify this by injecting furthercommands specifi c to the scripting platform in use. For exampleyou can use attack payloads similar to those used when fuzzing for OScommand injection:system(‘ping%20127.0.0.1’)'),
(295, '7.7.1', 'Test for File Inclusion', 'If you received any incoming HTTP connections from the target application’sinfrastructure during your fuzzing the application is almostcertainly vulnerable to remote fi le inclusion. Repeat the relevant testsin a single-threaded and time-throttled way to determine exactly whichparameters are causing the application to issue the HTTP requests.'),
(296, '7.7.2', 'Test for File Inclusion', 'Review the results of the fi le inclusion test cases and identify any thatcaused an anomalous delay in the application’s response. In these casesit may be that the application itself is vulnerable but that the resultingHTTP requests are timing out due to network-level fi lters.'),
(297, '7.7.3', 'Test for File Inclusion', 'If you fi nd a remote fi le inclusion vulnerability deploy a web servercontaining a malicious script specifi c to the language you are targetingand use commands such as those used to test for script injection to verifythat your script is being executed.'),
(298, '8.1.1', 'Test for SMTP Injection', 'For each request employed in e-mail–related functionality submit eachof the following test strings as each parameter in turn inserting yourown e-mail address at the relevant position. You can use Burp Intruderto automate this as described in step 7.1 for general fuzzing. These teststrings already have special characters URL-encoded so do not applyany additional encoding to them.<youremail>%0aCc:<youremail><youremail>%0d%0aCc:<youremail><youremail>%0aBcc:<youremail><youremail>%0d%0aBcc:<youremail>%0aDATA%0afoo%0a%2e%0aMAIL+FROM:+<youremail>%0aRCPT+TO:+<youremail>Chapter 21 n A Web Application Hacker’s Methodology 837%0aDATA%0aFrom:+<youremail>%0aTo:+<youremail>%0aSubject:+test%0afoo%0a%2e%0a%0d%0aDATA%0d%0afoo%0d%0a%2e%0d%0aMAIL+FROM:+<youremail>%0d%0aRCPT+TO:+<youremail>%0d%0aDATA%0d%0aFrom:+<youremail>%0d%0aTo:+<youremail>%0d%0aSubject:+test%0d%0afoo%0d%0a%2e%0d%0a'),
(299, '8.1.2', 'Test for SMTP Injection', 'Review the results to identify any error messages the application returns.If these appear to relate to any problem in the e-mail function investigatewhether you need to fi ne-tune your input to exploit a vulnerability.'),
(300, '8.1.3', 'Test for SMTP Injection', 'Monitor the e-mail address you specifi ed to see if any e-mail messagesare received.'),
(301, '8.1.4', 'Test for SMTP Injection', 'Review closely the HTML form that generates the relevant request. Itmay contain clues regarding the server-side software being used. Itmay also contain a hidden or disabled fi eld that is used to specify theTo address of the e-mail which you can modify directly.'),
(302, '8.2.1', 'Test for Native Software Vulnerabilities', 'Test for Buffer Overfl ows'),
(303, '8.2.1.1', 'Test for Native Software Vulnerabilities', 'For each item of data being targeted submit a range of long strings withlengths somewhat longer than common buffer sizes. Target one item ofdata at a time to maximize the coverage of code paths in the application.You can use the character blocks payload source in Burp Intruder toautomatically generate payloads of various sizes. The following buffersizes are suitable to test:'),
(304, '1100', 'Test for Native Software Vulnerabilities', ''),
(305, '4200', 'Test for Native Software Vulnerabilities', ''),
(306, '33000', 'Test for Native Software Vulnerabilities', ''),
(307, '8.2.1.2', 'Test for Native Software Vulnerabilities', 'Monitor the application’s responses to identify any anomalies. An uncontrolledoverfl ow is almost certain to cause an exception in the applicationalthough diagnosing the nature of the problem remotely may bediffi cult. Look for any of the following anomalies:n An HTTP 500 status code or error message where other malformed(but not overlong) input does not have the same effectn An informative message indicating that a failure occurred in someexternal native code componentn A partial or malformed response being received from the servern The TCP connection to the server closing abruptly without returninga response'),
(308, '8.2.2', 'Test for Native Software Vulnerabilities', 'Test for Integer Vulnerabilities'),
(309, '8.2.2.1', 'Test for Native Software Vulnerabilities', 'When dealing with native code components identify any integer-baseddata particularly length indicators which may be used to trigger integervulnerabilities.'),
(310, '8.2.2.2', 'Test for Native Software Vulnerabilities', 'Within each targeted item send suitable payloads designed to triggerany vulnerabilities. For each item of data being targeted send a seriesof different values in turn representing boundary cases for the signedand unsigned versions of different sizes of integer. For example:n 0x7f and 0x80 (127 and 128)n 0xff and 0x100 (255 and 256)n 0x7ffff and 0x8000 (32767 and 32768)n 0xffff and 0x10000 (65535 and 65536)n 0x7fffffff and 0x80000000 (2147483647 and 2147483648)n 0xffffffff and 0x0 (4294967295 and 0)'),
(311, '8.2.2.3', 'Test for Native Software Vulnerabilities', 'When the data being modifi ed is represented in hexadecimal form sendboth little-endian and big-endian versions of each test case such as ff7fand 7fff. If hexadecimal numbers are submitted in ASCII form usethe same case as the application itself uses for alphabetic characters toensure that these are decoded correctly.'),
(312, '8.2.2.4', 'Test for Native Software Vulnerabilities', 'Monitor the application’s responses for anomalous events as describedin step 8.2.1.2.'),
(313, '8.2.3', 'Test for Native Software Vulnerabilities', 'Test for Format String Vulnerabilities');
INSERT INTO `help_info` (`id`, `stepnum`, `category`, `data`) VALUES
(314, '8.2.3.1', 'Test for Native Software Vulnerabilities', 'Targeting each parameter in turn submit strings containing long sequencesof different format specifi ers. For example:%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%1!n!%2!n!%3!n!%4!n!%5!n!%6!n!%7!n!%8!n!%9!n!%10!n! etc...%1!s!%2!s!%3!s!%4!s!%5!s!%6!s!%7!s!%8!s!%9!s!%10!s! etc...Remember to URL-encode the % character as %25.'),
(315, '8.2.3.2', 'Test for Native Software Vulnerabilities', 'Monitor the application’s responses for anomalous events as describedin step 8.2.1.2.Chapter 21 n A Web Application Hacker’s Methodology 839'),
(316, '8.3.1', 'Test for SOAP Injection', 'Target each parameter in turn that you suspect is being processed viaa SOAP message. Submit a rogue XML closing tag such as </foo>. Ifno error occurs your input is probably not being inserted into a SOAPmessage or is being sanitized in some way.'),
(317, '8.3.2', 'Test for SOAP Injection', 'If an error was received submit instead a valid opening and closingtag pair such as <foo></foo>. If this causes the error to disappear theapplication may be vulnerable.'),
(318, '8.3.3', 'Test for SOAP Injection', 'If the item you submit is copied back into the application’s responsessubmit the following two values in turn. If you fi nd that either item isreturned as the other or as simply test you can be confi dent that yourinput is being inserted into an XML-based message.test<foo/>test<foo></foo>'),
(319, '8.3.4', 'Test for SOAP Injection', 'If the HTTP request contains several parameters that may be beingplaced into a SOAP message try inserting the opening comment character<!-- into one parameter and the closing comment character !-->into another parameter. Then switch these (because you have no wayof knowing in which order the parameters appear). This can have theeffect of commenting out a portion of the server’s SOAP message whichmay change the application’s logic or result in a different error conditionthat may divulge information.'),
(320, '8.4.1', 'Test for LDAP Injection', 'In any functionality where user-supplied data is used to retrieve informationfrom a directory service target each parameter in turn to testfor potential injection into an LDAP query.'),
(321, '8.4.2', 'Test for LDAP Injection', 'Submit the * character. If a large number of results are returned this isa good indicator that you are dealing with an LDAP query.'),
(322, '8.4.3', 'Test for LDAP Injection', 'Try entering a number of closing parentheses:))))))))))This input invalidates the query syntax so if an error or other anomalousbehavior results the application may be vulnerable (although manyother application functions and injection situations may behave in thesame way).'),
(323, '8.4.4', 'Test for LDAP Injection', 'Try entering various expressions designed to interfere with differenttypes of queries and see if these allow you to infl uence the results being'),
(325, '8.4.5', 'Test for LDAP Injection', 'Try adding extra attributes to the end of your input using commas toseparate each item. Test each attribute in turn. An error indicates thatthe attribute is not valid in the present context. The following attributesare commonly used in directories queried by LDAP:cncmailgivennameooudcluidobjectclasspostaladdressdnsn'),
(326, '8.5.1', 'Test for XPath Injection', 'Try submitting the following values and determine whether they resultin different application behavior without causing an error:‘ or count(parent::*[position()=1])=0 or ‘a’=’b‘ or count(parent::*[position()=1])>0 or ‘a’=’b'),
(327, '8.5.2', 'Test for XPath Injection', 'If the parameter is numeric also try the following test strings:'),
(328, '1', 'Test for XPath Injection', 'or count(parent::*[position()=1])=0'),
(329, '1', 'Test for XPath Injection', 'or count(parent::*[position()=1])>0'),
(330, '8.5.3', 'Test for XPath Injection', 'If any of the preceding strings causes differential behavior within theapplication without causing an error it is likely that you can extractarbitrary data by crafting test conditions to extract 1 byte of informationat a time. Use a series of conditions with the following form to determinethe name of the current node’s parent:substring(name(parent::*[position()=1])11)=’a’Chapter 21 n A Web Application Hacker’s Methodology 841'),
(331, '8.5.4', 'Test for XPath Injection', 'Having extracted the name of the parent node use a series of conditionswith the following form to extract all the data within the XML tree:substring(//parentnodename[position()=1]/child::node()[position()=1]/text()11)=’a’'),
(332, '8.6.1', 'Test for Back-End Request Injection', 'Locate any instance where an internal server name or IP address isspecifi ed in a parameter. Submit an arbitrary server and port andmonitor the application for a timeout. Also submit localhost andfi nally your own IP address monitoring for incoming connections onthe port specifi ed.'),
(333, '8.6.2', 'Test for Back-End Request Injection', 'Target a request parameter that returns a specifi c page for a specifi cvalue and try to append a new injected parameter using various syntaxincluding the following:%26foo%3dbar (URL-encoded &foo=bar)%3bfoo%3dbar (URL-encoded ;foo=bar)%2526foo%253dbar (Double URL-encoded &foo=bar)If the application behaves as if the original parameter were unmodifi edthere is a chance of HTTP parameter injection vulnerabilities. Attemptto attack the back-end request by injecting known parameter name/value pairs that may alter the back-end logic as described in Chapter 10.'),
(334, '8.7.1', 'Test for XXE Injection', 'If users are submitting XML to the server an external entity injectionattack may be possible. If a fi eld is known that is returned to the userattempt to specify an external entity as in the following example:POST /search/128/AjaxSearch.ashx HTTP/1.1Host: mdsec.netContent-Type: text/xml; charset=UTF-8Content-Length: 115<!DOCTYPE foo [ <!ENTITY xxe SYSTEM “file:///windows/win.ini” > ]><Search><SearchTerm>&xxe;</SearchTerm></Search>If no known field can be found specify an external entity of“http://192.168.1.1:25” and monitor the page response time. If thepage takes signifi cantly longer to return or times out it may be vulnerable.'),
(335, '9.1.1', 'Identify the Key Attack Surface', 'Logic fl aws can take a huge variety of forms and exist within any aspectof the application’s functionality. To ensure that probing for logic fl awsis feasible you should fi rst narrow down the attack surface to a reasonablearea for manual testing.'),
(336, '9.1.2', 'Identify the Key Attack Surface', 'Review the results of your application mapping exercises and identifyany instances of the following features:n Multistage processesn Critical security functions such as loginn Transitions across trust boundaries (for example moving from beinganonymous to being self-registered to being logged in)n Context-based functionality presented to a usern Checks and adjustments made to transaction prices or quantities'),
(337, '9.2.1', 'Test Multistage Processes', 'When a multistage process involves a defi ned sequence of requestsattempt to submit these requests out of the expected sequence. Tryskipping certain stages accessing a single stage more than once andaccessing earlier stages after later ones.'),
(338, '9.2.2', 'Test Multistage Processes', 'The sequence of stages may be accessed via a series of GET or POSTrequests for distinct URLs or they may involve submitting differentsets of parameters to the same URL. You may specify the stage beingChapter 21 n A Web Application Hacker’s Methodology 843requested by submitting a function name or index within a requestparameter. Be sure to understand fully the mechanisms that the applicationis employing to deliver access to distinct stages.'),
(339, '9.2.3', 'Test Multistage Processes', 'In addition to interfering with the sequence of steps try taking parametersthat are submitted at one stage of the process and submitting themat a different stage. If the relevant items of data are updated within theapplication’s state you should investigate whether you can leveragethis behavior to interfere with the application’s logic.'),
(340, '9.2.4', 'Test Multistage Processes', 'If a multistage process involves different users performing operationson the same set of data try taking each parameter submitted by one userand submitting it as another. If they are accepted and processed as thatuser explore the implications of this behavior as described previously.'),
(341, '9.2.5', 'Test Multistage Processes', 'From the context of the functionality that is implemented try to understandwhat assumptions the developers may have made and where thekey attack surface lies. Try to identify ways of violating those assumptionsto cause undesirable behavior within the application.'),
(342, '9.2.6', 'Test Multistage Processes', 'When multistage functions are accessed out of sequence it is commonto encounter a variety of anomalous conditions within the applicationsuch as variables with null or uninitialized values partially defi ned orinconsistent state and other unpredictable behavior. Look for interestingerror messages and debug output which you can use to betterunderstand the application’s internal workings and thereby fi ne-tunethe current or a different attack.'),
(343, '9.3.1', 'Test Handling of Incomplete Input', 'For critical security functions within the application which involveprocessing several items of user input and making a decision based onthese test the application’s resilience to requests containing incompleteinput.'),
(344, '9.3.2', 'Test Handling of Incomplete Input', 'For each parameter in turn remove both the name and value of theparameter from the request. Monitor the application’s responses forany divergence in its behavior and any error messages that shed lighton the logic being performed.'),
(345, '9.3.3', 'Test Handling of Incomplete Input', 'If the request you are manipulating is part of a multistage process followthe process through to completion because the application may storedata submitted in earlier stages within the session and then process thisat a later stage.'),
(346, '9.4.1', 'Test Trust Boundaries', 'Probe how the application handles transitions between different typesof trust of the user. Look for functionality where a user with a giventrust status can accumulate an amount of state relating to his identity.For example an anonymous user could provide personal informationduring self-registration or proceed through part of an account recoveryprocess designed to establish his identity.'),
(347, '9.4.2', 'Test Trust Boundaries', 'Try to fi nd ways to make improper transitions across trust boundariesby accumulating relevant state in one area and then switching to adifferent area in a way that would not normally occur. For examplehaving completed part of an account recovery process attempt toswitch to an authenticated user-specifi c page. Test whether the applicationassigns you an inappropriate level of trust when you transitionin this way.'),
(348, '9.4.3', 'Test Trust Boundaries', 'Try to determine whether you can harness any higher-privileged functiondirectly or indirectly to access or infer information.'),
(349, '9.5.1', 'Test Transaction Logic', 'In cases where the application imposes transaction limits test theeffects of submitting negative values. If these are accepted it may bepossible to beat the limits by making large transactions in the oppositedirection.'),
(350, '9.5.2', 'Test Transaction Logic', 'Examine whether you can use a series of successive transactions to bringabout a state that you can exploit for a useful purpose. For example youmay be able to perform several low-value transfers between accountsto accrue a large balance that the application’s logic was intended toprevent.'),
(351, '9.5.3', 'Test Transaction Logic', 'If the application adjusts prices or other sensitive values based on criteriathat are determined by user-controllable data or actions fi rst understandthe algorithms used by the application and the point within its logicwhere adjustments are made. Identify whether these adjustments aremade on a one-time basis or whether they are revised in response tofurther actions performed by the user.'),
(352, '9.5.4', 'Test Transaction Logic', 'Try to fi nd ways to manipulate the application’s behavior to cause it toget into a state where the adjustments it has applied do not correspondto the original criteria intended by its designers.'),
(353, '10.1.1', 'Test Segregation in Shared Infrastructures', 'If the application is hosted in a shared infrastructure examine the accessmechanisms provided for customers of the shared environment to updateand manage their content and functionality. Consider the followingquestions:n Does the remote access facility use a secure protocol and suitablyhardened infrastructure?n Can customers access files data and other resources that they do notlegitimately need to access?n Can customers gain an interactive shell within the hosting environmentand execute arbitrary commands?'),
(354, '10.1.2', 'Test Segregation in Shared Infrastructures', 'If a proprietary application is used to allow customers to confi gure andcustomize a shared environment consider targeting this application asa way to compromise the environment itself and individual applicationsrunning within it.'),
(355, '10.1.3', 'Test Segregation in Shared Infrastructures', 'If you can achieve command execution SQL injection or arbitrary fi leaccess within one application investigate carefully whether this providesany way to escalate your attack to target other applications.'),
(356, '10.2.1', 'Test Segregation Between ASP-Hosted Applications', 'If the application belongs to an ASP-hosted service composed of amix of shared and customized components identify any shared componentssuch as logging mechanisms administrative functions anddatabase code components. Attempt to leverage these to compromisethe shared portion of the application and thereby attack other individualapplications.'),
(357, '10.2.2', 'Test Segregation Between ASP-Hosted Applications', 'If a common database is used within any kind of shared environmentperform a comprehensive audit of the database confi guration patch leveltable structure and permissions using a database scanning tool such asNGSSquirrel. Any defects within the database security model may providea way to escalate an attack from within one application to another.'),
(358, '11.1.1', 'Test for Default Credentials', 'Review the results of your application mapping exercises to identify theweb server and other technologies in use that may contain accessibleadministrative interfaces.'),
(359, '11.1.2', 'Test for Default Credentials', 'Perform a port scan of the web server to identify any administrativeinterfaces running on a different port than the main target application.'),
(360, '11.1.3', 'Test for Default Credentials', 'For any identifi ed interfaces consult the manufacturer’s documentationand common default password listings to obtain default credentials.'),
(361, '11.1.4', 'Test for Default Credentials', 'If the default credentials do not work use the steps listed in section 4to attempt to guess valid credentials.'),
(362, '11.1.5', 'Test for Default Credentials', 'If you gain access to an administrative interface review the availablefunctionality and determine whether it can be used to further compromisethe host and attack the main application.Chapter 21 n A Web Application Hacker’s Methodology 847'),
(363, '11.2.1', 'Test for Default Content', 'Review the results of your Nikto scan (step 1.4.1) to identify any defaultcontent that may be present on the server but that is not an integral partof the application.'),
(364, '11.2.2', 'Test for Default Content', 'Use search engines and other resources such as www.exploit-db.com andwww.osvdb.org to identify default content and functionality includedwithin the technologies you know to be in use. If feasible carry out alocal installation of these and review them for any default functionalitythat you may be able to leverage in your attack.'),
(365, '11.2.3', 'Test for Default Content', 'Examine the default content for any functionality or vulnerabilities thatyou may be able to leverage to attack the server or the application.'),
(366, '11.3.1', 'Test for Dangerous HTTP Methods', 'Use the OPTIONS method to list the HTTP methods that the server statesare available. Note that different methods may be enabled in differentdirectories. You can perform a vulnerability scan in Paros to performthis check.'),
(367, '11.3.2', 'Test for Dangerous HTTP Methods', 'Try each reported method manually to confi rm whether it can in fact beused.'),
(368, '11.3.3', 'Test for Dangerous HTTP Methods', 'If you fi nd that some WebDAV methods are enabled use a WebDAVenabledclient for further investigation such as Microsoft FrontPage orthe Open as Web Folder option in Internet Explorer.'),
(369, '11.4.1', 'Test for Proxy Functionality', 'Using both GET and CONNECT requests try to use the web server as aproxy to connect to other servers on the Internet and retrieve contentfrom them.'),
(370, '11.4.2', 'Test for Proxy Functionality', 'Using both GET and CONNECT requests attempt to connect to different IPaddresses and ports within the hosting infrastructure.'),
(371, '11.4.3', 'Test for Proxy Functionality', 'Using both GET and CONNECT requests attempt to connect to commonport numbers on the web server itself by specifying 127.0.0.1 as the targethost in the request.'),
(372, '11.5.1', 'Test for Virtual Hosting Misconfi guration', 'Submit GET requests to the root directory using the following:n The correct Host headern A bogus Host header'),
(373, '11.5.2', 'Test for Virtual Hosting Misconfi guration', 'Compare the responses to these requests. A common result is that directorylistings are obtained when the server’s IP address is used in the Hostheader. You may also fi nd that different default content is accessible.'),
(374, '11.5.3', 'Test for Virtual Hosting Misconfi guration', 'If you observe different behavior repeat the application mapping exercisesdescribed in section 1 using the hostname that generated differentresults. Be sure to perform a Nikto scan using the -vhost option to identifyany default content that may have been overlooked during initialapplication mapping.'),
(375, '11.6.1', 'Test for Web Server Software Bugs', 'Run Nessus and any other similar scanners you have available to identifyany known vulnerabilities in the web server software you are attacking.'),
(376, '11.6.2', 'Test for Web Server Software Bugs', 'Review resources such as Security Focus Bugtraq and Full Disclosureto fi nd details of any recently discovered vulnerabilities that may nothave been fi xed on your target.'),
(377, '11.6.3', 'Test for Web Server Software Bugs', 'If the application was developed by a third party investigate whether itships with its own web server (often an open source server). If it doesinvestigate this for any vulnerabilities. Be aware that in this case theserver’s standard banner may have been modifi ed.'),
(378, '11.6.4', 'Test for Web Server Software Bugs', 'If possible consider performing a local installation of the software youare attacking and carry out your own testing to fi nd new vulnerabilitiesthat have not been discovered or widely circulated.'),
(379, '11.7.1', 'Test for Web Application Firewalling', 'Submit an arbitrary parameter name to the application with a clear attackpayload in the value ideally somewhere the application includes thename and/or value in the response. If the application blocks the attackthis is likely to be due to an external defense.'),
(380, '11.7.2', 'Test for Web Application Firewalling', 'If a variable can be submitted that is returned in a server response submita range of fuzz strings and encoded variants to identify the behavior ofthe application defenses to user input.'),
(381, '11.7.3', 'Test for Web Application Firewalling', 'Confi rm this behavior by performing the same attacks on variableswithin the application.'),
(382, '11.7.4', 'Test for Web Application Firewalling', 'For all fuzzing strings and requests use payload strings that are unlikelyto exist in a standard signature database. Although giving examples ofChapter 21 n A Web Application Hacker’s Methodology 849these is by defi nition impossible avoid using /etc/passwd or /windows/system32/config/sam as payloads for fi le retrieval. Also avoid usingterms such as <script> in an XSS attack and using alert() or xss asXSS payloads.'),
(383, '11.7.5', 'Test for Web Application Firewalling', 'If a particular request is blocked try submitting the same parameter in adifferent location or context. For instance submit the same parameter inthe URL in a GET request within the body of a POST request and withinthe URL in a POST request.'),
(384, '11.7.6', 'Test for Web Application Firewalling', 'On ASP.NET also try submitting the parameter as a cookie. The APIRequest.Params[“foo”] will retrieve the value of a cookie named fooif the parameter foo is not found in the query string or message body.'),
(385, '11.7.7', 'Test for Web Application Firewalling', 'Review all the other methods of introducing user input provided inChapter 4 picking any that are not protected.'),
(386, '11.7.8', 'Test for Web Application Firewalling', 'Determine locations where user input is (or can be) submitted in a nonstandardformat such as serialization or encoding. If none is availablebuild the attack string by concatenation and/or by spanning it acrossmultiple variables. (Note that if the target is ASP.NET you may be ableto use HPP to concatenate the attack using multiple specifi cations of thesame variable.)'),
(387, '12.1.1', 'Check for DOM-Based Attacks', 'Perform a brief code review of every piece of JavaScript received fromthe application. Identify any XSS or redirection vulnerabilities that canbe triggered by using a crafted URL to introduce malicious data intothe DOM of the relevant page. Include all standalone JavaScript fi les'),
(388, '12.1.2', 'Check for DOM-Based Attacks', 'Identify all uses of the following APIs which may be used to accessDOM data that can be controlled via a crafted URL:document.locationdocument.URLdocument.URLUnencodeddocument.referrerwindow.location'),
(389, '12.1.3', 'Check for DOM-Based Attacks', 'Trace the relevant data through the code to identify what actions areperformed with it. If the data (or a manipulated form of it) is passed toone of the following APIs the application may be vulnerable to XSS:document.write()document.writeln()document.body.innerHtmleval()window.execScript()window.setInterval()window.setTimeout()'),
(390, '12.1.4', 'Check for DOM-Based Attacks', 'If the data is passed to one of the following APIs the application maybe vulnerable to a redirection attack:document.locationdocument.URLdocument.open()window.location.hrefwindow.navigate()window.open()'),
(391, '12.2.1', 'Check for Local Privacy Vulnerabilities', 'Review the logs created by your intercepting proxy to identify all theSet-Cookie directives received from the application during your testing.If any of these contains an expires attribute with a date that is inthe future the cookie will be stored by users’ browsers until that date.Review the contents of any persistent cookies for sensitive data.'),
(392, '12.2.2', 'Check for Local Privacy Vulnerabilities', 'If a persistent cookie is set that contains any sensitive data a local attackermay be able to capture this data. Even if the data is encrypted an attackerwho captures it will be able to resubmit the cookie to the applicationand gain access to any data or functionality that this allows.'),
(393, '12.2.3', 'Check for Local Privacy Vulnerabilities', 'If any application pages containing sensitive data are accessed overHTTP look for any cache directives within the server’s responses. If anyof the following directives do not exist (either within the HTTP headersChapter 21 n A Web Application Hacker’s Methodology 851or within HTML metatags) the page concerned may be cached by oneor more browsers:Expires: 0Cache-control: no-cachePragma: no-cache'),
(394, '12.2.4', 'Check for Local Privacy Vulnerabilities', 'Identify any instances within the application in which sensitive data istransmitted via a URL parameter. If any cases exist examine the browserhistory to verify that this data has been stored there.'),
(395, '12.2.5', 'Check for Local Privacy Vulnerabilities', 'For all forms that are used to capture sensitive data from the user (suchas credit card details) review the form’s HTML source. If the attributeautocomplete=off is not set within either the form tag or the tag for theindividual input fi eld data entered is stored within browsers that supportautocomplete provided that the user has not disabled this feature.'),
(396, '12.2.6', 'Check for Local Privacy Vulnerabilities', 'Check for technology-specifi c local storage.'),
(397, '12.2.6.1', 'Check for Local Privacy Vulnerabilities', 'Check for Flash local objects using the BetterPrivacy plug-infor Firefox.'),
(398, '12.2.6.2', 'Check for Local Privacy Vulnerabilities', 'Check any Silverlight isolated storage in this directory:C:\\Users\\{username}\\AppData\\LocalLow\\Microsoft\\Silverlight\\'),
(399, '12.2.6.3', 'Check for Local Privacy Vulnerabilities', 'Check any use of HTML5 local storage.'),
(400, '12.3.1', 'Check for Weak SSL Ciphers', 'If the application uses SSL for any of its communications use the toolTHCSSLCheck to list the ciphers and protocols supported.'),
(401, '12.3.2', 'Check for Weak SSL Ciphers', 'If any weak or obsolete ciphers and protocols are supported a suitablypositioned attacker may be able to perform an attack to downgrade ordecipher the SSL communications of an application user gaining accessto his sensitive data.'),
(402, '12.3.3', 'Check for Weak SSL Ciphers', 'Some web servers advertise certain weak ciphers and protocols as supportedbut refuse to actually complete a handshake using these if aclient requests them. This can lead to false positives when you use theTHCSSLCheck tool. You can use the Opera browser to attempt to performa complete handshake using specifi ed weak protocols to confi rmwhether these can actually be used to access the application.'),
(403, '12.4.1', 'Check Same-Origin Policy Confi guration', 'Check for the /crossdomain.xml fi le. If the application allows unrestrictedaccess (by specifying <allow-access-from domain=”*” />) Flash objects'),
(404, '12.4.2', 'Check Same-Origin Policy Confi guration', 'Check for the /clientaccesspolicy.xml fi le. Similar to Flash if the<cross-domain-access> confi guration is too permissive other sitescan perform two-way interaction with the site under assessment.'),
(405, '12.4.3', 'Check Same-Origin Policy Confi guration', 'Test an application’s handling of cross-domain requests usingXMLHttpRequest by adding an Origin header specifying a differentdomain and examining any Access-Control headers that are returned.The security implications of allowing two-way access from any domainor from specifi ed other domains are the same as those described for theFlash cross-domain policy.'),
(406, '13', 'Check Same-Origin Policy Confi guration', 'Follow Up Any Information Leakage');

-- --------------------------------------------------------

--
-- Table structure for table `identifier_specified_funcs`
--

CREATE TABLE IF NOT EXISTS `identifier_specified_funcs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `webapp_id` int(11) NOT NULL,
  `url` varchar(250) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=5 ;

--
-- Dumping data for table `identifier_specified_funcs`
--

INSERT INTO `identifier_specified_funcs` (`id`, `webapp_id`, `url`) VALUES
(1, 8, 'testurl'),
(4, 8, 'http://google.com/test.php?id=10');

-- --------------------------------------------------------

--
-- Table structure for table `mappingtab_checkboxes`
--

CREATE TABLE IF NOT EXISTS `mappingtab_checkboxes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `webapp_id` int(11) NOT NULL,
  `jscript` int(11) NOT NULL DEFAULT '0',
  `cookies` int(11) NOT NULL DEFAULT '0',
  `sitemap_review` int(11) NOT NULL DEFAULT '0',
  `active_spider` int(11) NOT NULL DEFAULT '0',
  `archive_site` int(11) NOT NULL DEFAULT '0',
  `public_emails` int(11) NOT NULL DEFAULT '0',
  `wsdl_files` int(11) NOT NULL DEFAULT '0',
  `non_existent` int(11) NOT NULL DEFAULT '0',
  `naming_conventions` int(11) NOT NULL DEFAULT '0',
  `hidden_server_side` int(11) NOT NULL DEFAULT '0',
  `automated_scanning` int(11) NOT NULL DEFAULT '0',
  `nikto_ran` int(11) NOT NULL DEFAULT '0',
  `request_server_root` int(11) NOT NULL DEFAULT '0',
  `request_server_root_ua` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=4 ;

--
-- Dumping data for table `mappingtab_checkboxes`
--

INSERT INTO `mappingtab_checkboxes` (`id`, `webapp_id`, `jscript`, `cookies`, `sitemap_review`, `active_spider`, `archive_site`, `public_emails`, `wsdl_files`, `non_existent`, `naming_conventions`, `hidden_server_side`, `automated_scanning`, `nikto_ran`, `request_server_root`, `request_server_root_ua`) VALUES
(2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

-- --------------------------------------------------------

--
-- Table structure for table `mappingtab_status`
--

CREATE TABLE IF NOT EXISTS `mappingtab_status` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `webapp_id` int(11) NOT NULL,
  `evcstatus` varchar(40) NOT NULL DEFAULT 'Not Started',
  `cprstatus` varchar(40) NOT NULL DEFAULT 'Not Started',
  `dhcstatus` varchar(40) NOT NULL DEFAULT 'Not Started',
  `ddcstatus` varchar(40) NOT NULL DEFAULT 'Not Started',
  `eisfstatus` varchar(40) NOT NULL DEFAULT 'Not Started',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=6 ;

--
-- Dumping data for table `mappingtab_status`
--

INSERT INTO `mappingtab_status` (`id`, `webapp_id`, `evcstatus`, `cprstatus`, `dhcstatus`, `ddcstatus`, `eisfstatus`) VALUES
(2, 8, 'Not Started', 'Not Started', 'Not Started', 'Not Started', 'Not Started');

-- --------------------------------------------------------

--
-- Table structure for table `nav_links`
--

CREATE TABLE IF NOT EXISTS `nav_links` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nav_menu_id` int(11) NOT NULL,
  `nav_text` varchar(100) NOT NULL,
  `nav_path` varchar(100) NOT NULL,
  `display_order` int(11) NOT NULL,
  `hidden` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=35 ;

--
-- Dumping data for table `nav_links`
--

INSERT INTO `nav_links` (`id`, `nav_menu_id`, `nav_text`, `nav_path`, `display_order`, `hidden`) VALUES
(32, 11, 'Projects', '/Projects/Work/management/projects.php', 1, 0),
(33, 11, 'Task List', '/Projects/Work/management/tasklist.php', 2, 0),
(34, 12, 'Web App Framework', '/Projects/Work/frameworks/webapp.php', 1, 0);

-- --------------------------------------------------------

--
-- Table structure for table `nav_menus`
--

CREATE TABLE IF NOT EXISTS `nav_menus` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `menu_text` varchar(100) NOT NULL,
  `menu_icon` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=13 ;

--
-- Dumping data for table `nav_menus`
--

INSERT INTO `nav_menus` (`id`, `menu_text`, `menu_icon`) VALUES
(11, 'Management', 'fa-area-chart'),
(12, 'PenTest Frameworks', 'fa-database');

-- --------------------------------------------------------

--
-- Table structure for table `nikto_reports`
--

CREATE TABLE IF NOT EXISTS `nikto_reports` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ipaddr` varchar(20) NOT NULL,
  `hostname` varchar(100) NOT NULL,
  `port` int(11) NOT NULL,
  `report` text NOT NULL,
  `webapp_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=7 ;

--
-- Dumping data for table `nikto_reports`
--

INSERT INTO `nikto_reports` (`id`, `ipaddr`, `hostname`, `port`, `report`, `webapp_id`) VALUES
(5, '127.0.0.1', 'localhost\r', 80, '- Nikto v2.1.4<br />\r\n---------------------------------------------------------------------------<br />\r\n+ Target IP:          127.0.0.1<br />\r\n+ Target Hostname:    localhost<br />\r\n+ Target Port:        80<br />\r\n+ Start Time:         2016-09-20 12:24:26<br />\r\n---------------------------------------------------------------------------<br />\r\n+ Server: Apache/2.4.7 (Ubuntu)<br />\r\n+ Retrieved x-powered-by header: PHP/5.5.9-1ubuntu4.19<br />\r\n+ Root page / redirects to: /login.php<br />\r\n+ OSVDB-3268: /scripts/: Directory indexing found.<br />\r\n+ ETag header found on server, fields: 0x407 0x52e94fab1849d <br />\r\n+ OSVDB-561: /server-status: This reveals Apache information. Comment out appropriate line in httpd.conf or restrict access to allowed hosts.<br />\r\n+ OSVDB-3268: /img/: Directory indexing found.<br />\r\n+ OSVDB-3092: /img/: This might be interesting...<br />\r\n+ OSVDB-3268: /includes/: Directory indexing found.<br />\r\n+ OSVDB-3092: /includes/: This might be interesting...<br />\r\n+ OSVDB-3092: /phpmyadmin/: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.<br />\r\n+ OSVDB-3092: /scripts/: This might be interesting... possibly a system shell found.<br />\r\n+ OSVDB-3233: /icons/README: Apache default file found.<br />\r\n+ /login.php: Admin login page/section found.<br />\r\n+ OSVDB-3092: /test.php: This might be interesting...<br />\r\n+ 6448 items checked: 0 error(s) and 13 item(s) reported on remote host<br />\r\n+ End Time:           2016-09-20 12:24:35 (9 seconds)<br />\r\n---------------------------------------------------------------------------<br />\r\n+ 1 host(s) tested<br />\r\n', 8),
(6, '192.168.221.128', '192.168.221.128\r', 80, '- Nikto v2.1.4<br />\r\n---------------------------------------------------------------------------<br />\r\n+ Target IP:          192.168.221.128<br />\r\n+ Target Hostname:    192.168.221.128<br />\r\n+ Target Port:        80<br />\r\n+ Start Time:         2016-09-20 15:23:18<br />\r\n---------------------------------------------------------------------------<br />\r\n+ Server: Apache/2.4.7 (Ubuntu)<br />\r\n+ Retrieved x-powered-by header: PHP/5.5.9-1ubuntu4.19<br />\r\n+ Root page / redirects to: /login.php<br />\r\n+ OSVDB-3268: /scripts/: Directory indexing found.<br />\r\n+ ETag header found on server, fields: 0x407 0x52e94fab1849d <br />\r\n+ OSVDB-561: /server-status: This reveals Apache information. Comment out appropriate line in httpd.conf or restrict access to allowed hosts.<br />\r\n+ OSVDB-3268: /img/: Directory indexing found.<br />\r\n+ OSVDB-3092: /img/: This might be interesting...<br />\r\n+ OSVDB-3268: /includes/: Directory indexing found.<br />\r\n+ OSVDB-3092: /includes/: This might be interesting...<br />\r\n+ OSVDB-3092: /phpmyadmin/: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.<br />\r\n+ OSVDB-3092: /scripts/: This might be interesting... possibly a system shell found.<br />\r\n+ OSVDB-3233: /icons/README: Apache default file found.<br />\r\n+ /login.php: Admin login page/section found.<br />\r\n+ OSVDB-3092: /test.php: This might be interesting...<br />\r\n+ 6448 items checked: 0 error(s) and 13 item(s) reported on remote host<br />\r\n+ End Time:           2016-09-20 15:23:29 (11 seconds)<br />\r\n---------------------------------------------------------------------------<br />\r\n+ 1 host(s) tested<br />\r\n', 8);

-- --------------------------------------------------------

--
-- Table structure for table `notes`
--

CREATE TABLE IF NOT EXISTS `notes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `task_id` int(11) NOT NULL,
  `project_id` int(11) NOT NULL,
  `note` varchar(200) NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=7 ;

--
-- Dumping data for table `notes`
--

INSERT INTO `notes` (`id`, `task_id`, `project_id`, `note`, `timestamp`) VALUES
(5, 3, 2, 'task 3 note', '2016-09-01 21:48:34'),
(6, 2, 2, 'test note', '2016-09-01 21:59:01');

-- --------------------------------------------------------

--
-- Table structure for table `projects`
--

CREATE TABLE IF NOT EXISTS `projects` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `status` int(12) NOT NULL,
  `priority` varchar(100) NOT NULL,
  `deadline` date NOT NULL,
  `asignee` varchar(100) NOT NULL,
  `description` varchar(200) NOT NULL,
  `deliverable` varchar(200) NOT NULL,
  `created` date NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `projects`
--

INSERT INTO `projects` (`id`, `name`, `status`, `priority`, `deadline`, `asignee`, `description`, `deliverable`, `created`, `timestamp`) VALUES
(1, 'test 1', 0, 'Low', '0000-00-00', 'Logan', 'Test description 2', '', '2016-08-31', '2016-09-12 21:38:56'),
(2, 'test', 1, 'High', '0000-00-00', 'Logan', 'test', '', '2016-08-31', '2016-08-31 22:51:54');

-- --------------------------------------------------------

--
-- Table structure for table `tasklist`
--

CREATE TABLE IF NOT EXISTS `tasklist` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL,
  `status` varchar(100) NOT NULL,
  `priority` varchar(100) NOT NULL,
  `deadline` date NOT NULL,
  `asignee` varchar(100) NOT NULL,
  `notes` varchar(100) NOT NULL,
  `created` date NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `project_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=4 ;

--
-- Dumping data for table `tasklist`
--

INSERT INTO `tasklist` (`id`, `name`, `status`, `priority`, `deadline`, `asignee`, `notes`, `created`, `timestamp`, `project_id`) VALUES
(2, 'test task 2', 'In Progress', 'Medium', '2016-09-02', 'Logan', '', '2016-09-01', '2016-09-01 21:05:34', 2),
(3, 'test task 3', 'Not Started', 'Medium', '2016-09-07', 'Logan', '', '2016-09-01', '2016-09-01 21:08:25', 2);

-- --------------------------------------------------------

--
-- Table structure for table `webapptests`
--

CREATE TABLE IF NOT EXISTS `webapptests` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `testname` varchar(250) NOT NULL,
  `description` varchar(250) NOT NULL,
  `asignee` varchar(250) NOT NULL,
  `created` date NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=28 ;

--
-- Dumping data for table `webapptests`
--

INSERT INTO `webapptests` (`id`, `testname`, `description`, `asignee`, `created`) VALUES
(8, 'working test', 'working test application', 'Logan', '2016-09-09');

-- --------------------------------------------------------

--
-- Table structure for table `webapp_domains`
--

CREATE TABLE IF NOT EXISTS `webapp_domains` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(250) NOT NULL,
  `added` date NOT NULL,
  `webapp_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=4 ;

--
-- Dumping data for table `webapp_domains`
--

INSERT INTO `webapp_domains` (`id`, `domain`, `added`, `webapp_id`) VALUES
(2, 'localhost', '2016-09-12', 8),
(3, '', '2016-09-19', 0);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
